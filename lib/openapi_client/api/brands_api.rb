=begin
#ShipCompliant Connect

#ShipCompliant REST API supporting eCommerce and Point of Sale workflows. <br /> * required fields.

The version of the OpenAPI document: v1
Contact: shipcompliantsupport@sovos.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenapiClient
  class BrandsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves brand information
    # Sample request:                    GET /api/v1/brands/BRAND123
    # @param brand_key [String] The brand key
    # @param [Hash] opts the optional parameters
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetBrandSuccessResponse]
    def api_v1_brands_brand_key_get(brand_key, opts = {})
      data, _status_code, _headers = api_v1_brands_brand_key_get_with_http_info(brand_key, opts)
      data
    end

    # Retrieves brand information
    # Sample request:                    GET /api/v1/brands/BRAND123
    # @param brand_key [String] The brand key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetBrandSuccessResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetBrandSuccessResponse data, response status code and response headers
    def api_v1_brands_brand_key_get_with_http_info(brand_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrandsApi.api_v1_brands_brand_key_get ...'
      end
      # resource path
      local_var_path = '/api/v1/brands/{brandKey}'.sub('{' + 'brandKey' + '}', CGI.escape(brand_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetBrandSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"BrandsApi.api_v1_brands_brand_key_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrandsApi#api_v1_brands_brand_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an existing brand
    # Sample request:                    PUT /api/v1/brands/BRAND123      {        \"Key\": \"BRAND123\",        \"TTBBrandKey\": \"TTBBrandKey\",        \"Name\": \"Example Brand\",        \"Owner\": {          \"City\": \"Boulder\",          \"Country\": \"US\",          \"Name\": \"Example Owner\",          \"State\": \"CO\",          \"Street1\": \"2465 Central Ave\",          \"Street2\": \"Ste 110\",          \"Zip\": \"80301\"        },        \"ThisBrandIsBottledByAThirdParty\": true,        \"ThisBrandIsProducedByAThirdParty\": true,        \"ThisBrandOperatesUnderATradeName\": true,        \"ThisBrandWasAcquiredFromAThirdParty\": false      }
    # @param brand_key [String] The brand key
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsBrandEntitiesBrand] :ship_compliant_rest_api_domains_brand_entities_brand The new Brand data
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPutBrandResponse]
    def api_v1_brands_brand_key_put(brand_key, opts = {})
      data, _status_code, _headers = api_v1_brands_brand_key_put_with_http_info(brand_key, opts)
      data
    end

    # Updates an existing brand
    # Sample request:                    PUT /api/v1/brands/BRAND123      {        \&quot;Key\&quot;: \&quot;BRAND123\&quot;,        \&quot;TTBBrandKey\&quot;: \&quot;TTBBrandKey\&quot;,        \&quot;Name\&quot;: \&quot;Example Brand\&quot;,        \&quot;Owner\&quot;: {          \&quot;City\&quot;: \&quot;Boulder\&quot;,          \&quot;Country\&quot;: \&quot;US\&quot;,          \&quot;Name\&quot;: \&quot;Example Owner\&quot;,          \&quot;State\&quot;: \&quot;CO\&quot;,          \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,          \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,          \&quot;Zip\&quot;: \&quot;80301\&quot;        },        \&quot;ThisBrandIsBottledByAThirdParty\&quot;: true,        \&quot;ThisBrandIsProducedByAThirdParty\&quot;: true,        \&quot;ThisBrandOperatesUnderATradeName\&quot;: true,        \&quot;ThisBrandWasAcquiredFromAThirdParty\&quot;: false      }
    # @param brand_key [String] The brand key
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsBrandEntitiesBrand] :ship_compliant_rest_api_domains_brand_entities_brand The new Brand data
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPutBrandResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPutBrandResponse data, response status code and response headers
    def api_v1_brands_brand_key_put_with_http_info(brand_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrandsApi.api_v1_brands_brand_key_put ...'
      end
      # resource path
      local_var_path = '/api/v1/brands/{brandKey}'.sub('{' + 'brandKey' + '}', CGI.escape(brand_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_brand_entities_brand'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPutBrandResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"BrandsApi.api_v1_brands_brand_key_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrandsApi#api_v1_brands_brand_key_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds a new brand
    # Sample request:                     POST /api/v1/brands      {          \"Key\": \"BRAND123\",          \"TTBBrandKey\": \"TTBBrandKey\",          \"Name\": \"Example Brand\",          \"Owner\": {              \"City\": \"Boulder\",              \"Country\": \"US\",              \"Name\": \"Example Owner\",              \"State\": \"CO\",              \"Street1\": \"2465 Central Ave\",              \"Street2\": \"Ste 110\",              \"Zip\": \"80301\"           },          \"ThisBrandIsBottledByAThirdParty\": true,          \"ThisBrandIsProducedByAThirdParty\": true,          \"ThisBrandOperatesUnderATradeName\": true,          \"ThisBrandWasAcquiredFromAThirdParty\": false      }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsBrandEntitiesPostBrand] :ship_compliant_rest_api_domains_brand_entities_post_brand The new Brand
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostBrandResponse]
    def api_v1_brands_post(opts = {})
      data, _status_code, _headers = api_v1_brands_post_with_http_info(opts)
      data
    end

    # Adds a new brand
    # Sample request:                     POST /api/v1/brands      {          \&quot;Key\&quot;: \&quot;BRAND123\&quot;,          \&quot;TTBBrandKey\&quot;: \&quot;TTBBrandKey\&quot;,          \&quot;Name\&quot;: \&quot;Example Brand\&quot;,          \&quot;Owner\&quot;: {              \&quot;City\&quot;: \&quot;Boulder\&quot;,              \&quot;Country\&quot;: \&quot;US\&quot;,              \&quot;Name\&quot;: \&quot;Example Owner\&quot;,              \&quot;State\&quot;: \&quot;CO\&quot;,              \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,              \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,              \&quot;Zip\&quot;: \&quot;80301\&quot;           },          \&quot;ThisBrandIsBottledByAThirdParty\&quot;: true,          \&quot;ThisBrandIsProducedByAThirdParty\&quot;: true,          \&quot;ThisBrandOperatesUnderATradeName\&quot;: true,          \&quot;ThisBrandWasAcquiredFromAThirdParty\&quot;: false      }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsBrandEntitiesPostBrand] :ship_compliant_rest_api_domains_brand_entities_post_brand The new Brand
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostBrandResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostBrandResponse data, response status code and response headers
    def api_v1_brands_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BrandsApi.api_v1_brands_post ...'
      end
      # resource path
      local_var_path = '/api/v1/brands'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_brand_entities_post_brand'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostBrandResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"BrandsApi.api_v1_brands_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BrandsApi#api_v1_brands_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
