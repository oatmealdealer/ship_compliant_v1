=begin
#ShipCompliant Connect

#ShipCompliant REST API supporting eCommerce and Point of Sale workflows. <br /> * required fields.

The version of the OpenAPI document: v1
Contact: shipcompliantsupport@sovos.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenapiClient
  class HoldLocationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets hold locations for an address within a specified radius
    # Sample request:                 GET /api/v1/holdLocations/FedEx?zipCode=80301&streetAddress=2465+Central+Ave&city=Boulder&stateOrProvince=CO&searchRadius=150&countryCode=US
    # @param carrier [String] Either \&quot;FedEx\&quot; or \&quot;UPS\&quot;
    # @param zip_code [String] Required query parameter representing postal code
    # @param street_address [String] Required param to add precision to the search
    # @param city [String] Required param for city name
    # @param country_code [String] Required two digit country code
    # @param state_or_province [String] Required two digit state code
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :search_radius Optional parameter that indicates mile radius for search. Defaults to 10 (default to 10)
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetHoldLocationResponse]
    def api_v1_hold_locations_carrier_get(carrier, zip_code, street_address, city, country_code, state_or_province, opts = {})
      data, _status_code, _headers = api_v1_hold_locations_carrier_get_with_http_info(carrier, zip_code, street_address, city, country_code, state_or_province, opts)
      data
    end

    # Gets hold locations for an address within a specified radius
    # Sample request:                 GET /api/v1/holdLocations/FedEx?zipCode&#x3D;80301&amp;streetAddress&#x3D;2465+Central+Ave&amp;city&#x3D;Boulder&amp;stateOrProvince&#x3D;CO&amp;searchRadius&#x3D;150&amp;countryCode&#x3D;US
    # @param carrier [String] Either \&quot;FedEx\&quot; or \&quot;UPS\&quot;
    # @param zip_code [String] Required query parameter representing postal code
    # @param street_address [String] Required param to add precision to the search
    # @param city [String] Required param for city name
    # @param country_code [String] Required two digit country code
    # @param state_or_province [String] Required two digit state code
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :search_radius Optional parameter that indicates mile radius for search. Defaults to 10 (default to 10)
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetHoldLocationResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetHoldLocationResponse data, response status code and response headers
    def api_v1_hold_locations_carrier_get_with_http_info(carrier, zip_code, street_address, city, country_code, state_or_province, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HoldLocationsApi.api_v1_hold_locations_carrier_get ...'
      end
      # resource path
      local_var_path = '/api/v1/holdLocations/{carrier}'.sub('{' + 'carrier' + '}', CGI.escape(carrier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'zipCode'] = zip_code
      query_params[:'streetAddress'] = street_address
      query_params[:'city'] = city
      query_params[:'countryCode'] = country_code
      query_params[:'stateOrProvince'] = state_or_province
      query_params[:'searchRadius'] = opts[:'search_radius'] if !opts[:'search_radius'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetHoldLocationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"HoldLocationsApi.api_v1_hold_locations_carrier_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HoldLocationsApi#api_v1_hold_locations_carrier_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
