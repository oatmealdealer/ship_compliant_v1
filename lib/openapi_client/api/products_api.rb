=begin
#ShipCompliant Connect

#ShipCompliant REST API supporting eCommerce and Point of Sale workflows. <br /> * required fields.

The version of the OpenAPI document: v1
Contact: shipcompliantsupport@sovos.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenapiClient
  class ProductsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds a new Combo
    # Sample request:                    POST /api/v1/products/combos      {          \"brandKey\": \"BRAND123\",          \"productComboKey\": \"COMBO123\",          \"description\": \"Example Combo\",          \"itemsPerCase\": 2,          \"wholesaleCasePrice\": 10.50,          \"totalWeight\": 20.00,          \"nabca\": \"string\",          \"scc\": \"string\",          \"unimerc\": \"string\",          \"upc\": \"string\",          \"gtin\": \"string\",          \"components\": [          {              \"productKey\": \"PROD123\",              \"brandKey\": \"BRAND123\",              \"quantity\": 3,          }          ],          \"distributionType\": \"Direct\"     }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsProductEntitiesComboInput] :ship_compliant_rest_api_domains_product_entities_combo_input The new Combo data
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostProductResponse]
    def api_v1_products_combos_post(opts = {})
      data, _status_code, _headers = api_v1_products_combos_post_with_http_info(opts)
      data
    end

    # Adds a new Combo
    # Sample request:                    POST /api/v1/products/combos      {          \&quot;brandKey\&quot;: \&quot;BRAND123\&quot;,          \&quot;productComboKey\&quot;: \&quot;COMBO123\&quot;,          \&quot;description\&quot;: \&quot;Example Combo\&quot;,          \&quot;itemsPerCase\&quot;: 2,          \&quot;wholesaleCasePrice\&quot;: 10.50,          \&quot;totalWeight\&quot;: 20.00,          \&quot;nabca\&quot;: \&quot;string\&quot;,          \&quot;scc\&quot;: \&quot;string\&quot;,          \&quot;unimerc\&quot;: \&quot;string\&quot;,          \&quot;upc\&quot;: \&quot;string\&quot;,          \&quot;gtin\&quot;: \&quot;string\&quot;,          \&quot;components\&quot;: [          {              \&quot;productKey\&quot;: \&quot;PROD123\&quot;,              \&quot;brandKey\&quot;: \&quot;BRAND123\&quot;,              \&quot;quantity\&quot;: 3,          }          ],          \&quot;distributionType\&quot;: \&quot;Direct\&quot;     }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsProductEntitiesComboInput] :ship_compliant_rest_api_domains_product_entities_combo_input The new Combo data
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostProductResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostProductResponse data, response status code and response headers
    def api_v1_products_combos_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.api_v1_products_combos_post ...'
      end
      # resource path
      local_var_path = '/api/v1/products/combos'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_product_entities_combo_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostProductResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"ProductsApi.api_v1_products_combos_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#api_v1_products_combos_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds a new Kit
    # Sample request:                    POST /api/v1/products/kits      {          \"type\": \"Prebuilt\",          \"brandKey\": \"BRAND123\",          \"productKey\": \"KIT123\",          \"description\": \"Example Kit\",          \"totalWeight\": 10.95,          \"components\": [            {              \"productKey\": \"PROD123\",              \"brandKey\": \"BRAND123\",              \"quantity\": 2            }          ],          \"distributionType\": \"Direct\"      }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsProductEntitiesKitInput] :ship_compliant_rest_api_domains_product_entities_kit_input The new Kit data
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostProductResponse]
    def api_v1_products_kits_post(opts = {})
      data, _status_code, _headers = api_v1_products_kits_post_with_http_info(opts)
      data
    end

    # Adds a new Kit
    # Sample request:                    POST /api/v1/products/kits      {          \&quot;type\&quot;: \&quot;Prebuilt\&quot;,          \&quot;brandKey\&quot;: \&quot;BRAND123\&quot;,          \&quot;productKey\&quot;: \&quot;KIT123\&quot;,          \&quot;description\&quot;: \&quot;Example Kit\&quot;,          \&quot;totalWeight\&quot;: 10.95,          \&quot;components\&quot;: [            {              \&quot;productKey\&quot;: \&quot;PROD123\&quot;,              \&quot;brandKey\&quot;: \&quot;BRAND123\&quot;,              \&quot;quantity\&quot;: 2            }          ],          \&quot;distributionType\&quot;: \&quot;Direct\&quot;      }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsProductEntitiesKitInput] :ship_compliant_rest_api_domains_product_entities_kit_input The new Kit data
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostProductResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostProductResponse data, response status code and response headers
    def api_v1_products_kits_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.api_v1_products_kits_post ...'
      end
      # resource path
      local_var_path = '/api/v1/products/kits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_product_entities_kit_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostProductResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"ProductsApi.api_v1_products_kits_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#api_v1_products_kits_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds a new product
    # Sample request:                    POST /api/v1/products      {          \"Age\": 2010,          \"BottleSizeML\": 700,          \"BrandKey\": \"BRAND123\",          \"DefaultCase\": \"12\",          \"DefaultRetailUnitPrice\": 10.00,          \"DefaultWholesaleCasePrice\": 100.00,          \"Description\": \"Example Product\",          \"Flavor\": \"Merlot\",          \"Style\": \"Merlot\",          \"GTIN\": \"012345678905\",          \"Label\": \"Example Label\",          \"NABCA\": \"01234567891\",          \"PercentAlcohol\": 6.8,          \"ProductDistribution\": \"Both\",          \"ProductKey\": \"EP\",          \"ProductType\": \"Wine\",          \"SCC\": \"10012345678902\",          \"UNIMERC\": \"012345\",          \"UnitPrice\": 10.00,          \"UPC\": \"012345678905\",          \"Varietal\": \"Merlot\",          \"Vintage\": 2010,          \"VolumeAmount\": 700.00,          \"VolumeUnit\": \"Milliliter\",          \"SubBrand\": \"Example Sub Brand\",          \"ContainerType\": \"Bottle\",          \"ContainersPerSellingUnit\": 1,          \"ShippingWeightInLbs\": 1.2      }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsProductEntitiesPostProductInput] :ship_compliant_rest_api_domains_product_entities_post_product_input The new Product
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostProductResponse]
    def api_v1_products_post(opts = {})
      data, _status_code, _headers = api_v1_products_post_with_http_info(opts)
      data
    end

    # Adds a new product
    # Sample request:                    POST /api/v1/products      {          \&quot;Age\&quot;: 2010,          \&quot;BottleSizeML\&quot;: 700,          \&quot;BrandKey\&quot;: \&quot;BRAND123\&quot;,          \&quot;DefaultCase\&quot;: \&quot;12\&quot;,          \&quot;DefaultRetailUnitPrice\&quot;: 10.00,          \&quot;DefaultWholesaleCasePrice\&quot;: 100.00,          \&quot;Description\&quot;: \&quot;Example Product\&quot;,          \&quot;Flavor\&quot;: \&quot;Merlot\&quot;,          \&quot;Style\&quot;: \&quot;Merlot\&quot;,          \&quot;GTIN\&quot;: \&quot;012345678905\&quot;,          \&quot;Label\&quot;: \&quot;Example Label\&quot;,          \&quot;NABCA\&quot;: \&quot;01234567891\&quot;,          \&quot;PercentAlcohol\&quot;: 6.8,          \&quot;ProductDistribution\&quot;: \&quot;Both\&quot;,          \&quot;ProductKey\&quot;: \&quot;EP\&quot;,          \&quot;ProductType\&quot;: \&quot;Wine\&quot;,          \&quot;SCC\&quot;: \&quot;10012345678902\&quot;,          \&quot;UNIMERC\&quot;: \&quot;012345\&quot;,          \&quot;UnitPrice\&quot;: 10.00,          \&quot;UPC\&quot;: \&quot;012345678905\&quot;,          \&quot;Varietal\&quot;: \&quot;Merlot\&quot;,          \&quot;Vintage\&quot;: 2010,          \&quot;VolumeAmount\&quot;: 700.00,          \&quot;VolumeUnit\&quot;: \&quot;Milliliter\&quot;,          \&quot;SubBrand\&quot;: \&quot;Example Sub Brand\&quot;,          \&quot;ContainerType\&quot;: \&quot;Bottle\&quot;,          \&quot;ContainersPerSellingUnit\&quot;: 1,          \&quot;ShippingWeightInLbs\&quot;: 1.2      }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsProductEntitiesPostProductInput] :ship_compliant_rest_api_domains_product_entities_post_product_input The new Product
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostProductResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostProductResponse data, response status code and response headers
    def api_v1_products_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.api_v1_products_post ...'
      end
      # resource path
      local_var_path = '/api/v1/products'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_product_entities_post_product_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostProductResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"ProductsApi.api_v1_products_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#api_v1_products_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Voids a Product by Product Key and Brand Key (optional)
    # Sample request:                 DELETE /api/v1/products/PROD123    If more than one brand contains the same product key:                    DELETE /api/v1/products/PROD123?brandKey=BRAND123
    # @param product_key [String] The product number or sku
    # @param [Hash] opts the optional parameters
    # @option opts [String] :brand_key The brand key
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteProductResponse]
    def api_v1_products_product_key_delete(product_key, opts = {})
      data, _status_code, _headers = api_v1_products_product_key_delete_with_http_info(product_key, opts)
      data
    end

    # Voids a Product by Product Key and Brand Key (optional)
    # Sample request:                 DELETE /api/v1/products/PROD123    If more than one brand contains the same product key:                    DELETE /api/v1/products/PROD123?brandKey&#x3D;BRAND123
    # @param product_key [String] The product number or sku
    # @param [Hash] opts the optional parameters
    # @option opts [String] :brand_key The brand key
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteProductResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteProductResponse data, response status code and response headers
    def api_v1_products_product_key_delete_with_http_info(product_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.api_v1_products_product_key_delete ...'
      end
      # resource path
      local_var_path = '/api/v1/products/{productKey}'.sub('{' + 'productKey' + '}', CGI.escape(product_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brandKey'] = opts[:'brand_key'] if !opts[:'brand_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteProductResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"ProductsApi.api_v1_products_product_key_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#api_v1_products_product_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a specific Product by Product Key and Brand Key (optional)
    # Sample request:                    GET /api/v1/products/PROD123                 If more than one brand contains the same product key:        GET /api/v1/products/PROD123?brandKey=BRAND123
    # @param product_key [String] The product number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :brand_key The brand key
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetProductSuccessResponse]
    def api_v1_products_product_key_get(product_key, opts = {})
      data, _status_code, _headers = api_v1_products_product_key_get_with_http_info(product_key, opts)
      data
    end

    # Retrieves a specific Product by Product Key and Brand Key (optional)
    # Sample request:                    GET /api/v1/products/PROD123                 If more than one brand contains the same product key:        GET /api/v1/products/PROD123?brandKey&#x3D;BRAND123
    # @param product_key [String] The product number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :brand_key The brand key
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetProductSuccessResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetProductSuccessResponse data, response status code and response headers
    def api_v1_products_product_key_get_with_http_info(product_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.api_v1_products_product_key_get ...'
      end
      # resource path
      local_var_path = '/api/v1/products/{productKey}'.sub('{' + 'productKey' + '}', CGI.escape(product_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brandKey'] = opts[:'brand_key'] if !opts[:'brand_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetProductSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"ProductsApi.api_v1_products_product_key_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#api_v1_products_product_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an existing product
    #  Sample request:         PUT /api/v1/products/PROD123       {     \"Age\": 2010,        \"BottleSizeML\": 700,        \"BrandKey\": \"BRAND123\",        \"DefaultCase\": \"12\",        \"DefaultRetailUnitPrice\": 10.00,        \"DefaultWholesaleCasePrice\": 100.00,        \"Description\": \"Example Product\",        \"Flavor\": \"Merlot\",        \"Style\": \"Merlot\",        \"GTIN\": \"012345678905\",        \"Label\": \"Example Label\",        \"NABCA\": \"01234567891\",        \"PercentAlcohol\": 6.8,        \"ProductDistribution\": \"Both\",        \"ProductType\": \"Wine\",        \"SCC\": \"10012345678902\",        \"UNIMERC\": \"012345\",        \"UnitPrice\": 10.00,        \"UPC\": \"012345678905\",        \"Varietal\": \"Merlot\",        \"Vintage\": 2010,        \"VolumeAmount\": 700.00,        \"VolumeUnit\": \"Milliliter\",        \"SubBrand\": \"Example Sub Brand\",        \"ContainerType\": \"Bottle\",        \"ContainersPerSellingUnit\": 1,        \"ShippingWeightInLbs\": 1.2       }
    # @param product_key [String] The Product key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :brand_key The Brand Key (optional)
    # @option opts [ShipCompliantRestAPIDomainsProductEntitiesProductInput] :ship_compliant_rest_api_domains_product_entities_product_input The new Product data
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPutProductResponse]
    def api_v1_products_product_key_put(product_key, opts = {})
      data, _status_code, _headers = api_v1_products_product_key_put_with_http_info(product_key, opts)
      data
    end

    # Updates an existing product
    #  Sample request:         PUT /api/v1/products/PROD123       {     \&quot;Age\&quot;: 2010,        \&quot;BottleSizeML\&quot;: 700,        \&quot;BrandKey\&quot;: \&quot;BRAND123\&quot;,        \&quot;DefaultCase\&quot;: \&quot;12\&quot;,        \&quot;DefaultRetailUnitPrice\&quot;: 10.00,        \&quot;DefaultWholesaleCasePrice\&quot;: 100.00,        \&quot;Description\&quot;: \&quot;Example Product\&quot;,        \&quot;Flavor\&quot;: \&quot;Merlot\&quot;,        \&quot;Style\&quot;: \&quot;Merlot\&quot;,        \&quot;GTIN\&quot;: \&quot;012345678905\&quot;,        \&quot;Label\&quot;: \&quot;Example Label\&quot;,        \&quot;NABCA\&quot;: \&quot;01234567891\&quot;,        \&quot;PercentAlcohol\&quot;: 6.8,        \&quot;ProductDistribution\&quot;: \&quot;Both\&quot;,        \&quot;ProductType\&quot;: \&quot;Wine\&quot;,        \&quot;SCC\&quot;: \&quot;10012345678902\&quot;,        \&quot;UNIMERC\&quot;: \&quot;012345\&quot;,        \&quot;UnitPrice\&quot;: 10.00,        \&quot;UPC\&quot;: \&quot;012345678905\&quot;,        \&quot;Varietal\&quot;: \&quot;Merlot\&quot;,        \&quot;Vintage\&quot;: 2010,        \&quot;VolumeAmount\&quot;: 700.00,        \&quot;VolumeUnit\&quot;: \&quot;Milliliter\&quot;,        \&quot;SubBrand\&quot;: \&quot;Example Sub Brand\&quot;,        \&quot;ContainerType\&quot;: \&quot;Bottle\&quot;,        \&quot;ContainersPerSellingUnit\&quot;: 1,        \&quot;ShippingWeightInLbs\&quot;: 1.2       }
    # @param product_key [String] The Product key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :brand_key The Brand Key (optional)
    # @option opts [ShipCompliantRestAPIDomainsProductEntitiesProductInput] :ship_compliant_rest_api_domains_product_entities_product_input The new Product data
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPutProductResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPutProductResponse data, response status code and response headers
    def api_v1_products_product_key_put_with_http_info(product_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductsApi.api_v1_products_product_key_put ...'
      end
      # resource path
      local_var_path = '/api/v1/products/{productKey}'.sub('{' + 'productKey' + '}', CGI.escape(product_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brandKey'] = opts[:'brand_key'] if !opts[:'brand_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_product_entities_product_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPutProductResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"ProductsApi.api_v1_products_product_key_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductsApi#api_v1_products_product_key_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
