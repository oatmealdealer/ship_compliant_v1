=begin
#ShipCompliant Connect

#ShipCompliant REST API supporting eCommerce and Point of Sale workflows. <br /> * required fields.

The version of the OpenAPI document: v1
Contact: shipcompliantsupport@sovos.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenapiClient
  class SalesOrdersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Checks the compliance and tax due of a sales order and saves the order to the system.
    # Sample request:                 POST /api/v1/salesOrders/check-commit   {     \"CommitOption\": \"AllShipments\",     \"SalesOrder\": {       \"BillTo\": {         \"DateOfBirth\": \"1970-01-01T00:00:00Z\",         \"City\": \"Boulder\",         \"Company\": \"Sovos\",         \"Country\": \"US\",         \"County\": \"Boulder\",         \"Email\": \"example@sovos.com\",         \"Fax\": \"555-555-5555\",         \"FirstName\": \"Test First Name\",         \"LastName\": \"Test Last Name\",         \"Phone\": \"555-555-5555\",         \"State\": \"CO\",         \"Street1\": \"2465 Central Ave\",         \"Street2\": \"Ste 110\",         \"Zip1\": \"80301\",         \"Zip2\": \"5728\"       },       \"CustomerKey\": \"Custom123\",       \"Discounts\": [         {           \"Amount\": 0.00,           \"Code\": \"string\",           \"Type\": \"string\"         }       ],       \"FulfillmentType\": \"Daily\",       \"OrderType\": \"Internet\",       \"Payments\": [         {           \"Amount\": 0.00,           \"SubType\": \"VISA\",           \"TransactionID\": \"string\",           \"Type\": \"CreditCard\"         }       ],       \"PurchaseDate\": \"2020-11-01T00:00:00Z\",       \"SalesOrderKey\": \"Order123\",       \"SalesTaxCollected\": 0.00,       \"Shipments\": [         {           \"Discounts\": [             {               \"Amount\": 0.00,               \"Code\": \"string\",               \"Type\": \"string\"             }           ],           \"FulfillmentAccount\": \"Account123\",           \"FulfillmentHouse\": \"WineShipping\",           \"FulfillmentExceptionReason\": \"Test Exception Reason\",           \"FulfillmentExceptionType\": \"Test Exception Type\",           \"GiftNote\": \"Happy Birthday\",           \"Handling\": 0.00,           \"LicenseRelationship\": \"SupplierToConsumer\",           \"Packages\": [             {               \"TrackingNumber\": \"ABC123456789\"             }           ],           \"ShipDate\": \"2020-11-01T00:00:00Z\",           \"ShipmentItems\": [{             \"BrandKey\": \"Brand123\",             \"Discounts\": [               {                 \"Amount\": 0.00,                 \"Code\": \"string\",                 \"Type\": \"string\"               }             ],             \"ProductKey\": \"Product123\",             \"ProductQuantity\": 2,             \"ProductUnitPrice\": 19.99,             \"CITB\": \"CITB\"           }],           \"ShipmentKey\": \"1\",           \"ShipmentStatus\": \"SentToFulfillment\",           \"Shipping\": 0.00,           \"ShippingService\": \"FEX\",           \"ShipTo\": {              \"DateOfBirth\": \"1970-01-01T00:00:00Z\",               \"City\": \"Boulder\",               \"Company\": \"Sovos\",               \"Country\": \"US\",               \"County\": \"Boulder\",               \"Email\": \"example@sovos.com\",               \"Fax\": \"555-555-5555\",               \"FirstName\": \"Test First Name\",               \"LastName\": \"Test Last Name\",               \"Phone\": \"555-555-5555\",               \"State\": \"CO\",               \"Street1\": \"2465 Central Ave\",               \"Street2\": \"Ste 110\",               \"Zip1\": \"80301\",               \"Zip2\": \"5728\"            },           \"SpecialInstructions\": \"Test Instructions\"         }       ],       \"Tags\": [         {           \"Name\": \"Test Tag\"         }       ]     },     \"AddressOption\": {       \"IgnoreStreetLevelErrors\": false,       \"RejectIfAddressSuggested\": true     },     \"PersistOption\": \"Null\"   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesCheckAndCommitSalesOrder] :ship_compliant_rest_api_domains_sales_order_entities_check_and_commit_sales_order The sales order to check compliance
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCheckComplianceResponse]
    def api_v1_sales_orders_check_commit_post(opts = {})
      data, _status_code, _headers = api_v1_sales_orders_check_commit_post_with_http_info(opts)
      data
    end

    # Checks the compliance and tax due of a sales order and saves the order to the system.
    # Sample request:                 POST /api/v1/salesOrders/check-commit   {     \&quot;CommitOption\&quot;: \&quot;AllShipments\&quot;,     \&quot;SalesOrder\&quot;: {       \&quot;BillTo\&quot;: {         \&quot;DateOfBirth\&quot;: \&quot;1970-01-01T00:00:00Z\&quot;,         \&quot;City\&quot;: \&quot;Boulder\&quot;,         \&quot;Company\&quot;: \&quot;Sovos\&quot;,         \&quot;Country\&quot;: \&quot;US\&quot;,         \&quot;County\&quot;: \&quot;Boulder\&quot;,         \&quot;Email\&quot;: \&quot;example@sovos.com\&quot;,         \&quot;Fax\&quot;: \&quot;555-555-5555\&quot;,         \&quot;FirstName\&quot;: \&quot;Test First Name\&quot;,         \&quot;LastName\&quot;: \&quot;Test Last Name\&quot;,         \&quot;Phone\&quot;: \&quot;555-555-5555\&quot;,         \&quot;State\&quot;: \&quot;CO\&quot;,         \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,         \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,         \&quot;Zip1\&quot;: \&quot;80301\&quot;,         \&quot;Zip2\&quot;: \&quot;5728\&quot;       },       \&quot;CustomerKey\&quot;: \&quot;Custom123\&quot;,       \&quot;Discounts\&quot;: [         {           \&quot;Amount\&quot;: 0.00,           \&quot;Code\&quot;: \&quot;string\&quot;,           \&quot;Type\&quot;: \&quot;string\&quot;         }       ],       \&quot;FulfillmentType\&quot;: \&quot;Daily\&quot;,       \&quot;OrderType\&quot;: \&quot;Internet\&quot;,       \&quot;Payments\&quot;: [         {           \&quot;Amount\&quot;: 0.00,           \&quot;SubType\&quot;: \&quot;VISA\&quot;,           \&quot;TransactionID\&quot;: \&quot;string\&quot;,           \&quot;Type\&quot;: \&quot;CreditCard\&quot;         }       ],       \&quot;PurchaseDate\&quot;: \&quot;2020-11-01T00:00:00Z\&quot;,       \&quot;SalesOrderKey\&quot;: \&quot;Order123\&quot;,       \&quot;SalesTaxCollected\&quot;: 0.00,       \&quot;Shipments\&quot;: [         {           \&quot;Discounts\&quot;: [             {               \&quot;Amount\&quot;: 0.00,               \&quot;Code\&quot;: \&quot;string\&quot;,               \&quot;Type\&quot;: \&quot;string\&quot;             }           ],           \&quot;FulfillmentAccount\&quot;: \&quot;Account123\&quot;,           \&quot;FulfillmentHouse\&quot;: \&quot;WineShipping\&quot;,           \&quot;FulfillmentExceptionReason\&quot;: \&quot;Test Exception Reason\&quot;,           \&quot;FulfillmentExceptionType\&quot;: \&quot;Test Exception Type\&quot;,           \&quot;GiftNote\&quot;: \&quot;Happy Birthday\&quot;,           \&quot;Handling\&quot;: 0.00,           \&quot;LicenseRelationship\&quot;: \&quot;SupplierToConsumer\&quot;,           \&quot;Packages\&quot;: [             {               \&quot;TrackingNumber\&quot;: \&quot;ABC123456789\&quot;             }           ],           \&quot;ShipDate\&quot;: \&quot;2020-11-01T00:00:00Z\&quot;,           \&quot;ShipmentItems\&quot;: [{             \&quot;BrandKey\&quot;: \&quot;Brand123\&quot;,             \&quot;Discounts\&quot;: [               {                 \&quot;Amount\&quot;: 0.00,                 \&quot;Code\&quot;: \&quot;string\&quot;,                 \&quot;Type\&quot;: \&quot;string\&quot;               }             ],             \&quot;ProductKey\&quot;: \&quot;Product123\&quot;,             \&quot;ProductQuantity\&quot;: 2,             \&quot;ProductUnitPrice\&quot;: 19.99,             \&quot;CITB\&quot;: \&quot;CITB\&quot;           }],           \&quot;ShipmentKey\&quot;: \&quot;1\&quot;,           \&quot;ShipmentStatus\&quot;: \&quot;SentToFulfillment\&quot;,           \&quot;Shipping\&quot;: 0.00,           \&quot;ShippingService\&quot;: \&quot;FEX\&quot;,           \&quot;ShipTo\&quot;: {              \&quot;DateOfBirth\&quot;: \&quot;1970-01-01T00:00:00Z\&quot;,               \&quot;City\&quot;: \&quot;Boulder\&quot;,               \&quot;Company\&quot;: \&quot;Sovos\&quot;,               \&quot;Country\&quot;: \&quot;US\&quot;,               \&quot;County\&quot;: \&quot;Boulder\&quot;,               \&quot;Email\&quot;: \&quot;example@sovos.com\&quot;,               \&quot;Fax\&quot;: \&quot;555-555-5555\&quot;,               \&quot;FirstName\&quot;: \&quot;Test First Name\&quot;,               \&quot;LastName\&quot;: \&quot;Test Last Name\&quot;,               \&quot;Phone\&quot;: \&quot;555-555-5555\&quot;,               \&quot;State\&quot;: \&quot;CO\&quot;,               \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,               \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,               \&quot;Zip1\&quot;: \&quot;80301\&quot;,               \&quot;Zip2\&quot;: \&quot;5728\&quot;            },           \&quot;SpecialInstructions\&quot;: \&quot;Test Instructions\&quot;         }       ],       \&quot;Tags\&quot;: [         {           \&quot;Name\&quot;: \&quot;Test Tag\&quot;         }       ]     },     \&quot;AddressOption\&quot;: {       \&quot;IgnoreStreetLevelErrors\&quot;: false,       \&quot;RejectIfAddressSuggested\&quot;: true     },     \&quot;PersistOption\&quot;: \&quot;Null\&quot;   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesCheckAndCommitSalesOrder] :ship_compliant_rest_api_domains_sales_order_entities_check_and_commit_sales_order The sales order to check compliance
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCheckComplianceResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCheckComplianceResponse data, response status code and response headers
    def api_v1_sales_orders_check_commit_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_check_commit_post ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/check-commit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_sales_order_entities_check_and_commit_sales_order'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCheckComplianceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_check_commit_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_check_commit_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks the compliance and tax due of a sales order that will be committed at a later time.
    # Sample request:                 POST /api/v1/salesOrders/check-compliance   {     \"SalesOrder\": {       \"BillTo\": {         \"DateOfBirth\": \"1970-01-01T00:00:00Z\",         \"City\": \"Boulder\",         \"Company\": \"Sovos\",         \"Country\": \"US\",         \"County\": \"Boulder\",         \"Email\": \"example@sovos.com\",         \"Fax\": \"555-555-5555\",         \"FirstName\": \"Test First Name\",         \"LastName\": \"Test Last Name\",         \"Phone\": \"555-555-5555\",         \"State\": \"CO\",         \"Street1\": \"2465 Central Ave\",         \"Street2\": \"Ste 110\",         \"Zip1\": \"80301\",         \"Zip2\": \"5728\"       },       \"CustomerKey\": \"Custom123\",       \"Discounts\": [         {           \"Amount\": 0.00,           \"Code\": \"string\",           \"Type\": \"string\"         }       ],       \"FulfillmentType\": \"Daily\",       \"OrderType\": \"Internet\",       \"Payments\": [         {           \"Amount\": 0.00,           \"SubType\": \"VISA\",           \"TransactionID\": \"string\",           \"Type\": \"CreditCard\"         }       ],       \"PurchaseDate\": \"2020-11-01T00:00:00Z\",       \"SalesOrderKey\": \"Order123\",       \"SalesTaxCollected\": 0.00,       \"Shipments\": [         {           \"Discounts\": [             {               \"Amount\": 0.00,               \"Code\": \"string\",               \"Type\": \"string\"             }           ],           \"FulfillmentAccount\": \"Account123\",           \"FulfillmentHouse\": \"WineShipping\",           \"FulfillmentExceptionReason\": \"Test Exception Reason\",           \"FulfillmentExceptionType\": \"Test Exception Type\",           \"GiftNote\": \"Happy Birthday\",           \"Handling\": 0.00,           \"LicenseRelationship\": \"SupplierToConsumer\",           \"Packages\": [             {               \"TrackingNumber\": \"ABC123456789\"             }           ],           \"ShipDate\": \"2020-11-01T00:00:00Z\",           \"ShipmentItems\": [{             \"BrandKey\": \"Brand123\",             \"Discounts\": [               {                 \"Amount\": 0.00,                 \"Code\": \"string\",                 \"Type\": \"string\"               }             ],             \"ProductKey\": \"Product123\",             \"ProductQuantity\": 2,             \"ProductUnitPrice\": 19.99,             \"CITB\": \"CITB\"           }],           \"ShipmentKey\": \"1\",           \"ShipmentStatus\": \"SentToFulfillment\",           \"Shipping\": 0.00,           \"ShippingService\": \"FEX\",           \"ShipTo\": {              \"DateOfBirth\": \"1970-01-01T00:00:00Z\",               \"City\": \"Boulder\",               \"Company\": \"Sovos\",               \"Country\": \"US\",               \"County\": \"Boulder\",               \"Email\": \"example@sovos.com\",               \"Fax\": \"555-555-5555\",               \"FirstName\": \"Test First Name\",               \"LastName\": \"Test Last Name\",               \"Phone\": \"555-555-5555\",               \"State\": \"CO\",               \"Street1\": \"2465 Central Ave\",               \"Street2\": \"Ste 110\",               \"Zip1\": \"80301\",               \"Zip2\": \"5728\"            },           \"SpecialInstructions\": \"Test Instructions\"         }       ],       \"Tags\": [         {           \"Name\": \"Test Tag\"         }       ]     },     \"AddressOption\": {       \"IgnoreStreetLevelErrors\": false,       \"RejectIfAddressSuggested\": true     },     \"PersistOption\": \"Null\"   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesSalesOrderBase] :ship_compliant_rest_api_domains_sales_order_entities_sales_order_base The sales order to check compliance
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCheckComplianceResponse]
    def api_v1_sales_orders_check_compliance_post(opts = {})
      data, _status_code, _headers = api_v1_sales_orders_check_compliance_post_with_http_info(opts)
      data
    end

    # Checks the compliance and tax due of a sales order that will be committed at a later time.
    # Sample request:                 POST /api/v1/salesOrders/check-compliance   {     \&quot;SalesOrder\&quot;: {       \&quot;BillTo\&quot;: {         \&quot;DateOfBirth\&quot;: \&quot;1970-01-01T00:00:00Z\&quot;,         \&quot;City\&quot;: \&quot;Boulder\&quot;,         \&quot;Company\&quot;: \&quot;Sovos\&quot;,         \&quot;Country\&quot;: \&quot;US\&quot;,         \&quot;County\&quot;: \&quot;Boulder\&quot;,         \&quot;Email\&quot;: \&quot;example@sovos.com\&quot;,         \&quot;Fax\&quot;: \&quot;555-555-5555\&quot;,         \&quot;FirstName\&quot;: \&quot;Test First Name\&quot;,         \&quot;LastName\&quot;: \&quot;Test Last Name\&quot;,         \&quot;Phone\&quot;: \&quot;555-555-5555\&quot;,         \&quot;State\&quot;: \&quot;CO\&quot;,         \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,         \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,         \&quot;Zip1\&quot;: \&quot;80301\&quot;,         \&quot;Zip2\&quot;: \&quot;5728\&quot;       },       \&quot;CustomerKey\&quot;: \&quot;Custom123\&quot;,       \&quot;Discounts\&quot;: [         {           \&quot;Amount\&quot;: 0.00,           \&quot;Code\&quot;: \&quot;string\&quot;,           \&quot;Type\&quot;: \&quot;string\&quot;         }       ],       \&quot;FulfillmentType\&quot;: \&quot;Daily\&quot;,       \&quot;OrderType\&quot;: \&quot;Internet\&quot;,       \&quot;Payments\&quot;: [         {           \&quot;Amount\&quot;: 0.00,           \&quot;SubType\&quot;: \&quot;VISA\&quot;,           \&quot;TransactionID\&quot;: \&quot;string\&quot;,           \&quot;Type\&quot;: \&quot;CreditCard\&quot;         }       ],       \&quot;PurchaseDate\&quot;: \&quot;2020-11-01T00:00:00Z\&quot;,       \&quot;SalesOrderKey\&quot;: \&quot;Order123\&quot;,       \&quot;SalesTaxCollected\&quot;: 0.00,       \&quot;Shipments\&quot;: [         {           \&quot;Discounts\&quot;: [             {               \&quot;Amount\&quot;: 0.00,               \&quot;Code\&quot;: \&quot;string\&quot;,               \&quot;Type\&quot;: \&quot;string\&quot;             }           ],           \&quot;FulfillmentAccount\&quot;: \&quot;Account123\&quot;,           \&quot;FulfillmentHouse\&quot;: \&quot;WineShipping\&quot;,           \&quot;FulfillmentExceptionReason\&quot;: \&quot;Test Exception Reason\&quot;,           \&quot;FulfillmentExceptionType\&quot;: \&quot;Test Exception Type\&quot;,           \&quot;GiftNote\&quot;: \&quot;Happy Birthday\&quot;,           \&quot;Handling\&quot;: 0.00,           \&quot;LicenseRelationship\&quot;: \&quot;SupplierToConsumer\&quot;,           \&quot;Packages\&quot;: [             {               \&quot;TrackingNumber\&quot;: \&quot;ABC123456789\&quot;             }           ],           \&quot;ShipDate\&quot;: \&quot;2020-11-01T00:00:00Z\&quot;,           \&quot;ShipmentItems\&quot;: [{             \&quot;BrandKey\&quot;: \&quot;Brand123\&quot;,             \&quot;Discounts\&quot;: [               {                 \&quot;Amount\&quot;: 0.00,                 \&quot;Code\&quot;: \&quot;string\&quot;,                 \&quot;Type\&quot;: \&quot;string\&quot;               }             ],             \&quot;ProductKey\&quot;: \&quot;Product123\&quot;,             \&quot;ProductQuantity\&quot;: 2,             \&quot;ProductUnitPrice\&quot;: 19.99,             \&quot;CITB\&quot;: \&quot;CITB\&quot;           }],           \&quot;ShipmentKey\&quot;: \&quot;1\&quot;,           \&quot;ShipmentStatus\&quot;: \&quot;SentToFulfillment\&quot;,           \&quot;Shipping\&quot;: 0.00,           \&quot;ShippingService\&quot;: \&quot;FEX\&quot;,           \&quot;ShipTo\&quot;: {              \&quot;DateOfBirth\&quot;: \&quot;1970-01-01T00:00:00Z\&quot;,               \&quot;City\&quot;: \&quot;Boulder\&quot;,               \&quot;Company\&quot;: \&quot;Sovos\&quot;,               \&quot;Country\&quot;: \&quot;US\&quot;,               \&quot;County\&quot;: \&quot;Boulder\&quot;,               \&quot;Email\&quot;: \&quot;example@sovos.com\&quot;,               \&quot;Fax\&quot;: \&quot;555-555-5555\&quot;,               \&quot;FirstName\&quot;: \&quot;Test First Name\&quot;,               \&quot;LastName\&quot;: \&quot;Test Last Name\&quot;,               \&quot;Phone\&quot;: \&quot;555-555-5555\&quot;,               \&quot;State\&quot;: \&quot;CO\&quot;,               \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,               \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,               \&quot;Zip1\&quot;: \&quot;80301\&quot;,               \&quot;Zip2\&quot;: \&quot;5728\&quot;            },           \&quot;SpecialInstructions\&quot;: \&quot;Test Instructions\&quot;         }       ],       \&quot;Tags\&quot;: [         {           \&quot;Name\&quot;: \&quot;Test Tag\&quot;         }       ]     },     \&quot;AddressOption\&quot;: {       \&quot;IgnoreStreetLevelErrors\&quot;: false,       \&quot;RejectIfAddressSuggested\&quot;: true     },     \&quot;PersistOption\&quot;: \&quot;Null\&quot;   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesSalesOrderBase] :ship_compliant_rest_api_domains_sales_order_entities_sales_order_base The sales order to check compliance
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCheckComplianceResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCheckComplianceResponse data, response status code and response headers
    def api_v1_sales_orders_check_compliance_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_check_compliance_post ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/check-compliance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_sales_order_entities_sales_order_base'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCheckComplianceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_check_compliance_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_check_compliance_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a sales order to the system that has previously been checked for compliance.
    # Sample request:                 POST /api/v1/salesOrders/commit   {     \"CommitOption\": \"AllShipments\",     \"Payments\": [       {         \"Amount\": 0.00,         \"SubType\": \"VISA\",         \"TransactionID\": \"string\",         \"Type\": \"CreditCard\"       }     ],     \"SalesTaxCollected\": 0.00,     \"SalesOrderKey\": \"Order123\"   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesCommitSalesOrder] :ship_compliant_rest_api_domains_sales_order_entities_commit_sales_order The sales order to commit
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCommitResponse]
    def api_v1_sales_orders_commit_post(opts = {})
      data, _status_code, _headers = api_v1_sales_orders_commit_post_with_http_info(opts)
      data
    end

    # Saves a sales order to the system that has previously been checked for compliance.
    # Sample request:                 POST /api/v1/salesOrders/commit   {     \&quot;CommitOption\&quot;: \&quot;AllShipments\&quot;,     \&quot;Payments\&quot;: [       {         \&quot;Amount\&quot;: 0.00,         \&quot;SubType\&quot;: \&quot;VISA\&quot;,         \&quot;TransactionID\&quot;: \&quot;string\&quot;,         \&quot;Type\&quot;: \&quot;CreditCard\&quot;       }     ],     \&quot;SalesTaxCollected\&quot;: 0.00,     \&quot;SalesOrderKey\&quot;: \&quot;Order123\&quot;   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesCommitSalesOrder] :ship_compliant_rest_api_domains_sales_order_entities_commit_sales_order The sales order to commit
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCommitResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCommitResponse data, response status code and response headers
    def api_v1_sales_orders_commit_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_commit_post ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/commit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_sales_order_entities_commit_sales_order'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCommitResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_commit_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_commit_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a sales order to the system without checking compliance or tax due.
    # Sample request:                 POST /api/v1/salesOrders   {     \"SalesOrder\": {       \"BillTo\": {         \"DateOfBirth\": \"1970-01-01T00:00:00Z\",         \"City\": \"Boulder\",         \"Company\": \"Sovos\",         \"Country\": \"US\",         \"County\": \"Boulder\",         \"Email\": \"example@sovos.com\",         \"Fax\": \"555-555-5555\",         \"FirstName\": \"Test First Name\",         \"LastName\": \"Test Last Name\",         \"Phone\": \"555-555-5555\",         \"State\": \"CO\",         \"Street1\": \"2465 Central Ave\",         \"Street2\": \"Ste 110\",         \"Zip1\": \"80301\",         \"Zip2\": \"5728\"       },       \"CustomerKey\": \"Custom123\",       \"Discounts\": [         {           \"Amount\": 0.00,           \"Code\": \"string\",           \"Type\": \"string\"         }       ],       \"FulfillmentType\": \"Daily\",       \"OrderType\": \"Internet\",       \"Payments\": [         {           \"Amount\": 0.00,           \"SubType\": \"VISA\",           \"TransactionID\": \"string\",           \"Type\": \"CreditCard\"         }       ],       \"PurchaseDate\": \"2020-11-01T00:00:00Z\",       \"SalesOrderKey\": \"Order123\",       \"SalesTaxCollected\": 0.00,       \"Shipments\": [         {           \"Discounts\": [             {               \"Amount\": 0.00,               \"Code\": \"string\",               \"Type\": \"string\"             }           ],           \"FulfillmentAccount\": \"Account123\",           \"FulfillmentHouse\": \"WineShipping\",           \"FulfillmentExceptionReason\": \"Test Exception Reason\",           \"FulfillmentExceptionType\": \"Test Exception Type\",           \"GiftNote\": \"Happy Birthday\",           \"Handling\": 0.00,           \"LicenseRelationship\": \"SupplierToConsumer\",           \"Packages\": [             {               \"TrackingNumber\": \"ABC123456789\"             }           ],           \"ShipDate\": \"2020-11-01T00:00:00Z\",           \"ShipmentItems\": [{             \"BrandKey\": \"Brand123\",             \"Discounts\": [               {                 \"Amount\": 0.00,                 \"Code\": \"string\",                 \"Type\": \"string\"               }             ],             \"ProductKey\": \"Product123\",             \"ProductQuantity\": 2,             \"ProductUnitPrice\": 19.99,             \"CITB\": \"CITB\"           }],           \"ShipmentKey\": \"1\",           \"ShipmentStatus\": \"SentToFulfillment\",           \"Shipping\": 0.00,           \"ShippingService\": \"FEX\",           \"ShipTo\": {              \"DateOfBirth\": \"1970-01-01T00:00:00Z\",               \"City\": \"Boulder\",               \"Company\": \"Sovos\",               \"Country\": \"US\",               \"County\": \"Boulder\",               \"Email\": \"example@sovos.com\",               \"Fax\": \"555-555-5555\",               \"FirstName\": \"Test First Name\",               \"LastName\": \"Test Last Name\",               \"Phone\": \"555-555-5555\",               \"State\": \"CO\",               \"Street1\": \"2465 Central Ave\",               \"Street2\": \"Ste 110\",               \"Zip1\": \"80301\",               \"Zip2\": \"5728\"            },           \"SpecialInstructions\": \"Test Instructions\"         }       ],       \"Tags\": [         {           \"Name\": \"Test Tag\"         }       ]     },     \"AddressOption\": {       \"IgnoreStreetLevelErrors\": false,       \"RejectIfAddressSuggested\": true     },     \"PersistOption\": \"Null\"   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesSalesOrderBase] :ship_compliant_rest_api_domains_sales_order_entities_sales_order_base The sales order to Persist
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostSalesOrderResponse]
    def api_v1_sales_orders_post(opts = {})
      data, _status_code, _headers = api_v1_sales_orders_post_with_http_info(opts)
      data
    end

    # Saves a sales order to the system without checking compliance or tax due.
    # Sample request:                 POST /api/v1/salesOrders   {     \&quot;SalesOrder\&quot;: {       \&quot;BillTo\&quot;: {         \&quot;DateOfBirth\&quot;: \&quot;1970-01-01T00:00:00Z\&quot;,         \&quot;City\&quot;: \&quot;Boulder\&quot;,         \&quot;Company\&quot;: \&quot;Sovos\&quot;,         \&quot;Country\&quot;: \&quot;US\&quot;,         \&quot;County\&quot;: \&quot;Boulder\&quot;,         \&quot;Email\&quot;: \&quot;example@sovos.com\&quot;,         \&quot;Fax\&quot;: \&quot;555-555-5555\&quot;,         \&quot;FirstName\&quot;: \&quot;Test First Name\&quot;,         \&quot;LastName\&quot;: \&quot;Test Last Name\&quot;,         \&quot;Phone\&quot;: \&quot;555-555-5555\&quot;,         \&quot;State\&quot;: \&quot;CO\&quot;,         \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,         \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,         \&quot;Zip1\&quot;: \&quot;80301\&quot;,         \&quot;Zip2\&quot;: \&quot;5728\&quot;       },       \&quot;CustomerKey\&quot;: \&quot;Custom123\&quot;,       \&quot;Discounts\&quot;: [         {           \&quot;Amount\&quot;: 0.00,           \&quot;Code\&quot;: \&quot;string\&quot;,           \&quot;Type\&quot;: \&quot;string\&quot;         }       ],       \&quot;FulfillmentType\&quot;: \&quot;Daily\&quot;,       \&quot;OrderType\&quot;: \&quot;Internet\&quot;,       \&quot;Payments\&quot;: [         {           \&quot;Amount\&quot;: 0.00,           \&quot;SubType\&quot;: \&quot;VISA\&quot;,           \&quot;TransactionID\&quot;: \&quot;string\&quot;,           \&quot;Type\&quot;: \&quot;CreditCard\&quot;         }       ],       \&quot;PurchaseDate\&quot;: \&quot;2020-11-01T00:00:00Z\&quot;,       \&quot;SalesOrderKey\&quot;: \&quot;Order123\&quot;,       \&quot;SalesTaxCollected\&quot;: 0.00,       \&quot;Shipments\&quot;: [         {           \&quot;Discounts\&quot;: [             {               \&quot;Amount\&quot;: 0.00,               \&quot;Code\&quot;: \&quot;string\&quot;,               \&quot;Type\&quot;: \&quot;string\&quot;             }           ],           \&quot;FulfillmentAccount\&quot;: \&quot;Account123\&quot;,           \&quot;FulfillmentHouse\&quot;: \&quot;WineShipping\&quot;,           \&quot;FulfillmentExceptionReason\&quot;: \&quot;Test Exception Reason\&quot;,           \&quot;FulfillmentExceptionType\&quot;: \&quot;Test Exception Type\&quot;,           \&quot;GiftNote\&quot;: \&quot;Happy Birthday\&quot;,           \&quot;Handling\&quot;: 0.00,           \&quot;LicenseRelationship\&quot;: \&quot;SupplierToConsumer\&quot;,           \&quot;Packages\&quot;: [             {               \&quot;TrackingNumber\&quot;: \&quot;ABC123456789\&quot;             }           ],           \&quot;ShipDate\&quot;: \&quot;2020-11-01T00:00:00Z\&quot;,           \&quot;ShipmentItems\&quot;: [{             \&quot;BrandKey\&quot;: \&quot;Brand123\&quot;,             \&quot;Discounts\&quot;: [               {                 \&quot;Amount\&quot;: 0.00,                 \&quot;Code\&quot;: \&quot;string\&quot;,                 \&quot;Type\&quot;: \&quot;string\&quot;               }             ],             \&quot;ProductKey\&quot;: \&quot;Product123\&quot;,             \&quot;ProductQuantity\&quot;: 2,             \&quot;ProductUnitPrice\&quot;: 19.99,             \&quot;CITB\&quot;: \&quot;CITB\&quot;           }],           \&quot;ShipmentKey\&quot;: \&quot;1\&quot;,           \&quot;ShipmentStatus\&quot;: \&quot;SentToFulfillment\&quot;,           \&quot;Shipping\&quot;: 0.00,           \&quot;ShippingService\&quot;: \&quot;FEX\&quot;,           \&quot;ShipTo\&quot;: {              \&quot;DateOfBirth\&quot;: \&quot;1970-01-01T00:00:00Z\&quot;,               \&quot;City\&quot;: \&quot;Boulder\&quot;,               \&quot;Company\&quot;: \&quot;Sovos\&quot;,               \&quot;Country\&quot;: \&quot;US\&quot;,               \&quot;County\&quot;: \&quot;Boulder\&quot;,               \&quot;Email\&quot;: \&quot;example@sovos.com\&quot;,               \&quot;Fax\&quot;: \&quot;555-555-5555\&quot;,               \&quot;FirstName\&quot;: \&quot;Test First Name\&quot;,               \&quot;LastName\&quot;: \&quot;Test Last Name\&quot;,               \&quot;Phone\&quot;: \&quot;555-555-5555\&quot;,               \&quot;State\&quot;: \&quot;CO\&quot;,               \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,               \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,               \&quot;Zip1\&quot;: \&quot;80301\&quot;,               \&quot;Zip2\&quot;: \&quot;5728\&quot;            },           \&quot;SpecialInstructions\&quot;: \&quot;Test Instructions\&quot;         }       ],       \&quot;Tags\&quot;: [         {           \&quot;Name\&quot;: \&quot;Test Tag\&quot;         }       ]     },     \&quot;AddressOption\&quot;: {       \&quot;IgnoreStreetLevelErrors\&quot;: false,       \&quot;RejectIfAddressSuggested\&quot;: true     },     \&quot;PersistOption\&quot;: \&quot;Null\&quot;   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesSalesOrderBase] :ship_compliant_rest_api_domains_sales_order_entities_sales_order_base The sales order to Persist
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostSalesOrderResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostSalesOrderResponse data, response status code and response headers
    def api_v1_sales_orders_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_post ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_sales_order_entities_sales_order_base'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostSalesOrderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks the compliance of a sales order without saving results for future use.
    # Sample request:                 POST /api/v1/salesOrders/quote/compliance   {     \"SalesOrder\": {       \"BillTo\": {         \"DateOfBirth\": \"1970-01-01T00:00:00Z\",         \"City\": \"Boulder\",         \"Company\": \"Sovos\",         \"Country\": \"US\",         \"County\": \"Boulder\",         \"Email\": \"example@sovos.com\",         \"Fax\": \"555-555-5555\",         \"FirstName\": \"Test First Name\",         \"LastName\": \"Test Last Name\",         \"Phone\": \"555-555-5555\",         \"State\": \"CO\",         \"Street1\": \"2465 Central Ave\",         \"Street2\": \"Ste 110\",         \"Zip1\": \"80301\",         \"Zip2\": \"5728\"       },       \"CustomerKey\": \"Custom123\",       \"Discounts\": [         {           \"Amount\": 0.00,           \"Code\": \"string\",           \"Type\": \"string\"         }       ],       \"FulfillmentType\": \"Daily\",       \"OrderType\": \"Internet\",       \"Payments\": [         {           \"Amount\": 0.00,           \"SubType\": \"VISA\",           \"TransactionID\": \"string\",           \"Type\": \"CreditCard\"         }       ],       \"PurchaseDate\": \"2020-11-01T00:00:00Z\",       \"SalesOrderKey\": \"Order123\",       \"SalesTaxCollected\": 0.00,       \"Shipments\": [         {           \"Discounts\": [             {               \"Amount\": 0.00,               \"Code\": \"string\",               \"Type\": \"string\"             }           ],           \"FulfillmentAccount\": \"Account123\",           \"FulfillmentHouse\": \"WineShipping\",           \"FulfillmentExceptionReason\": \"Test Exception Reason\",           \"FulfillmentExceptionType\": \"Test Exception Type\",           \"GiftNote\": \"Happy Birthday\",           \"Handling\": 0.00,           \"LicenseRelationship\": \"SupplierToConsumer\",           \"Packages\": [             {               \"TrackingNumber\": \"ABC123456789\"             }           ],           \"ShipDate\": \"2020-11-01T00:00:00Z\",           \"ShipmentItems\": [{             \"BrandKey\": \"Brand123\",             \"Discounts\": [               {                 \"Amount\": 0.00,                 \"Code\": \"string\",                 \"Type\": \"string\"               }             ],             \"ProductKey\": \"Product123\",             \"ProductQuantity\": 2,             \"ProductUnitPrice\": 19.99,             \"CITB\": \"CITB\"           }],           \"ShipmentKey\": \"1\",           \"ShipmentStatus\": \"SentToFulfillment\",           \"Shipping\": 0.00,           \"ShippingService\": \"FEX\",           \"ShipTo\": {              \"DateOfBirth\": \"1970-01-01T00:00:00Z\",               \"City\": \"Boulder\",               \"Company\": \"Sovos\",               \"Country\": \"US\",               \"County\": \"Boulder\",               \"Email\": \"example@sovos.com\",               \"Fax\": \"555-555-5555\",               \"FirstName\": \"Test First Name\",               \"LastName\": \"Test Last Name\",               \"Phone\": \"555-555-5555\",               \"State\": \"CO\",               \"Street1\": \"2465 Central Ave\",               \"Street2\": \"Ste 110\",               \"Zip1\": \"80301\",               \"Zip2\": \"5728\"            },           \"SpecialInstructions\": \"Test Instructions\"         }       ],       \"Tags\": [         {           \"Name\": \"Test Tag\"         }       ]     },     \"AddressOption\": {       \"IgnoreStreetLevelErrors\": false,       \"RejectIfAddressSuggested\": true     }   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesQuoteSalesOrderInput] :ship_compliant_rest_api_domains_sales_order_entities_quote_sales_order_input The sales order to Quote
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesQuoteComplianceResponse]
    def api_v1_sales_orders_quote_compliance_post(opts = {})
      data, _status_code, _headers = api_v1_sales_orders_quote_compliance_post_with_http_info(opts)
      data
    end

    # Checks the compliance of a sales order without saving results for future use.
    # Sample request:                 POST /api/v1/salesOrders/quote/compliance   {     \&quot;SalesOrder\&quot;: {       \&quot;BillTo\&quot;: {         \&quot;DateOfBirth\&quot;: \&quot;1970-01-01T00:00:00Z\&quot;,         \&quot;City\&quot;: \&quot;Boulder\&quot;,         \&quot;Company\&quot;: \&quot;Sovos\&quot;,         \&quot;Country\&quot;: \&quot;US\&quot;,         \&quot;County\&quot;: \&quot;Boulder\&quot;,         \&quot;Email\&quot;: \&quot;example@sovos.com\&quot;,         \&quot;Fax\&quot;: \&quot;555-555-5555\&quot;,         \&quot;FirstName\&quot;: \&quot;Test First Name\&quot;,         \&quot;LastName\&quot;: \&quot;Test Last Name\&quot;,         \&quot;Phone\&quot;: \&quot;555-555-5555\&quot;,         \&quot;State\&quot;: \&quot;CO\&quot;,         \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,         \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,         \&quot;Zip1\&quot;: \&quot;80301\&quot;,         \&quot;Zip2\&quot;: \&quot;5728\&quot;       },       \&quot;CustomerKey\&quot;: \&quot;Custom123\&quot;,       \&quot;Discounts\&quot;: [         {           \&quot;Amount\&quot;: 0.00,           \&quot;Code\&quot;: \&quot;string\&quot;,           \&quot;Type\&quot;: \&quot;string\&quot;         }       ],       \&quot;FulfillmentType\&quot;: \&quot;Daily\&quot;,       \&quot;OrderType\&quot;: \&quot;Internet\&quot;,       \&quot;Payments\&quot;: [         {           \&quot;Amount\&quot;: 0.00,           \&quot;SubType\&quot;: \&quot;VISA\&quot;,           \&quot;TransactionID\&quot;: \&quot;string\&quot;,           \&quot;Type\&quot;: \&quot;CreditCard\&quot;         }       ],       \&quot;PurchaseDate\&quot;: \&quot;2020-11-01T00:00:00Z\&quot;,       \&quot;SalesOrderKey\&quot;: \&quot;Order123\&quot;,       \&quot;SalesTaxCollected\&quot;: 0.00,       \&quot;Shipments\&quot;: [         {           \&quot;Discounts\&quot;: [             {               \&quot;Amount\&quot;: 0.00,               \&quot;Code\&quot;: \&quot;string\&quot;,               \&quot;Type\&quot;: \&quot;string\&quot;             }           ],           \&quot;FulfillmentAccount\&quot;: \&quot;Account123\&quot;,           \&quot;FulfillmentHouse\&quot;: \&quot;WineShipping\&quot;,           \&quot;FulfillmentExceptionReason\&quot;: \&quot;Test Exception Reason\&quot;,           \&quot;FulfillmentExceptionType\&quot;: \&quot;Test Exception Type\&quot;,           \&quot;GiftNote\&quot;: \&quot;Happy Birthday\&quot;,           \&quot;Handling\&quot;: 0.00,           \&quot;LicenseRelationship\&quot;: \&quot;SupplierToConsumer\&quot;,           \&quot;Packages\&quot;: [             {               \&quot;TrackingNumber\&quot;: \&quot;ABC123456789\&quot;             }           ],           \&quot;ShipDate\&quot;: \&quot;2020-11-01T00:00:00Z\&quot;,           \&quot;ShipmentItems\&quot;: [{             \&quot;BrandKey\&quot;: \&quot;Brand123\&quot;,             \&quot;Discounts\&quot;: [               {                 \&quot;Amount\&quot;: 0.00,                 \&quot;Code\&quot;: \&quot;string\&quot;,                 \&quot;Type\&quot;: \&quot;string\&quot;               }             ],             \&quot;ProductKey\&quot;: \&quot;Product123\&quot;,             \&quot;ProductQuantity\&quot;: 2,             \&quot;ProductUnitPrice\&quot;: 19.99,             \&quot;CITB\&quot;: \&quot;CITB\&quot;           }],           \&quot;ShipmentKey\&quot;: \&quot;1\&quot;,           \&quot;ShipmentStatus\&quot;: \&quot;SentToFulfillment\&quot;,           \&quot;Shipping\&quot;: 0.00,           \&quot;ShippingService\&quot;: \&quot;FEX\&quot;,           \&quot;ShipTo\&quot;: {              \&quot;DateOfBirth\&quot;: \&quot;1970-01-01T00:00:00Z\&quot;,               \&quot;City\&quot;: \&quot;Boulder\&quot;,               \&quot;Company\&quot;: \&quot;Sovos\&quot;,               \&quot;Country\&quot;: \&quot;US\&quot;,               \&quot;County\&quot;: \&quot;Boulder\&quot;,               \&quot;Email\&quot;: \&quot;example@sovos.com\&quot;,               \&quot;Fax\&quot;: \&quot;555-555-5555\&quot;,               \&quot;FirstName\&quot;: \&quot;Test First Name\&quot;,               \&quot;LastName\&quot;: \&quot;Test Last Name\&quot;,               \&quot;Phone\&quot;: \&quot;555-555-5555\&quot;,               \&quot;State\&quot;: \&quot;CO\&quot;,               \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,               \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,               \&quot;Zip1\&quot;: \&quot;80301\&quot;,               \&quot;Zip2\&quot;: \&quot;5728\&quot;            },           \&quot;SpecialInstructions\&quot;: \&quot;Test Instructions\&quot;         }       ],       \&quot;Tags\&quot;: [         {           \&quot;Name\&quot;: \&quot;Test Tag\&quot;         }       ]     },     \&quot;AddressOption\&quot;: {       \&quot;IgnoreStreetLevelErrors\&quot;: false,       \&quot;RejectIfAddressSuggested\&quot;: true     }   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesQuoteSalesOrderInput] :ship_compliant_rest_api_domains_sales_order_entities_quote_sales_order_input The sales order to Quote
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesQuoteComplianceResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesQuoteComplianceResponse data, response status code and response headers
    def api_v1_sales_orders_quote_compliance_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_quote_compliance_post ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/quote/compliance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_sales_order_entities_quote_sales_order_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesQuoteComplianceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_quote_compliance_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_quote_compliance_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checks the compliance and tax due of a sales order without saving results for future use.
    # Sample request:                 POST /api/v1/salesOrders/quote   {     \"SalesOrder\": {       \"BillTo\": {         \"DateOfBirth\": \"1970-01-01T00:00:00Z\",         \"City\": \"Boulder\",         \"Company\": \"Sovos\",         \"Country\": \"US\",         \"County\": \"Boulder\",         \"Email\": \"example@sovos.com\",         \"Fax\": \"555-555-5555\",         \"FirstName\": \"Test First Name\",         \"LastName\": \"Test Last Name\",         \"Phone\": \"555-555-5555\",         \"State\": \"CO\",         \"Street1\": \"2465 Central Ave\",         \"Street2\": \"Ste 110\",         \"Zip1\": \"80301\",         \"Zip2\": \"5728\"       },       \"CustomerKey\": \"Custom123\",       \"Discounts\": [         {           \"Amount\": 0.00,           \"Code\": \"string\",           \"Type\": \"string\"         }       ],       \"FulfillmentType\": \"Daily\",       \"OrderType\": \"Internet\",       \"Payments\": [         {           \"Amount\": 0.00,           \"SubType\": \"VISA\",           \"TransactionID\": \"string\",           \"Type\": \"CreditCard\"         }       ],       \"PurchaseDate\": \"2020-11-01T00:00:00Z\",       \"SalesOrderKey\": \"Order123\",       \"SalesTaxCollected\": 0.00,       \"Shipments\": [         {           \"Discounts\": [             {               \"Amount\": 0.00,               \"Code\": \"string\",               \"Type\": \"string\"             }           ],           \"FulfillmentAccount\": \"Account123\",           \"FulfillmentHouse\": \"WineShipping\",           \"FulfillmentExceptionReason\": \"Test Exception Reason\",           \"FulfillmentExceptionType\": \"Test Exception Type\",           \"GiftNote\": \"Happy Birthday\",           \"Handling\": 0.00,           \"LicenseRelationship\": \"SupplierToConsumer\",           \"Packages\": [             {               \"TrackingNumber\": \"ABC123456789\"             }           ],           \"ShipDate\": \"2020-11-01T00:00:00Z\",           \"ShipmentItems\": [{             \"BrandKey\": \"Brand123\",             \"Discounts\": [               {                 \"Amount\": 0.00,                 \"Code\": \"string\",                 \"Type\": \"string\"               }             ],             \"ProductKey\": \"Product123\",             \"ProductQuantity\": 2,             \"ProductUnitPrice\": 19.99,             \"CITB\": \"CITB\"           }],           \"ShipmentKey\": \"1\",           \"ShipmentStatus\": \"SentToFulfillment\",           \"Shipping\": 0.00,           \"ShippingService\": \"FEX\",           \"ShipTo\": {              \"DateOfBirth\": \"1970-01-01T00:00:00Z\",               \"City\": \"Boulder\",               \"Company\": \"Sovos\",               \"Country\": \"US\",               \"County\": \"Boulder\",               \"Email\": \"example@sovos.com\",               \"Fax\": \"555-555-5555\",               \"FirstName\": \"Test First Name\",               \"LastName\": \"Test Last Name\",               \"Phone\": \"555-555-5555\",               \"State\": \"CO\",               \"Street1\": \"2465 Central Ave\",               \"Street2\": \"Ste 110\",               \"Zip1\": \"80301\",               \"Zip2\": \"5728\"            },           \"SpecialInstructions\": \"Test Instructions\"         }       ],       \"Tags\": [         {           \"Name\": \"Test Tag\"         }       ]     },     \"AddressOption\": {       \"IgnoreStreetLevelErrors\": false,       \"RejectIfAddressSuggested\": true     }   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesQuoteSalesOrderInput] :ship_compliant_rest_api_domains_sales_order_entities_quote_sales_order_input The sales order to Quote
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCheckComplianceResponse]
    def api_v1_sales_orders_quote_post(opts = {})
      data, _status_code, _headers = api_v1_sales_orders_quote_post_with_http_info(opts)
      data
    end

    # Checks the compliance and tax due of a sales order without saving results for future use.
    # Sample request:                 POST /api/v1/salesOrders/quote   {     \&quot;SalesOrder\&quot;: {       \&quot;BillTo\&quot;: {         \&quot;DateOfBirth\&quot;: \&quot;1970-01-01T00:00:00Z\&quot;,         \&quot;City\&quot;: \&quot;Boulder\&quot;,         \&quot;Company\&quot;: \&quot;Sovos\&quot;,         \&quot;Country\&quot;: \&quot;US\&quot;,         \&quot;County\&quot;: \&quot;Boulder\&quot;,         \&quot;Email\&quot;: \&quot;example@sovos.com\&quot;,         \&quot;Fax\&quot;: \&quot;555-555-5555\&quot;,         \&quot;FirstName\&quot;: \&quot;Test First Name\&quot;,         \&quot;LastName\&quot;: \&quot;Test Last Name\&quot;,         \&quot;Phone\&quot;: \&quot;555-555-5555\&quot;,         \&quot;State\&quot;: \&quot;CO\&quot;,         \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,         \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,         \&quot;Zip1\&quot;: \&quot;80301\&quot;,         \&quot;Zip2\&quot;: \&quot;5728\&quot;       },       \&quot;CustomerKey\&quot;: \&quot;Custom123\&quot;,       \&quot;Discounts\&quot;: [         {           \&quot;Amount\&quot;: 0.00,           \&quot;Code\&quot;: \&quot;string\&quot;,           \&quot;Type\&quot;: \&quot;string\&quot;         }       ],       \&quot;FulfillmentType\&quot;: \&quot;Daily\&quot;,       \&quot;OrderType\&quot;: \&quot;Internet\&quot;,       \&quot;Payments\&quot;: [         {           \&quot;Amount\&quot;: 0.00,           \&quot;SubType\&quot;: \&quot;VISA\&quot;,           \&quot;TransactionID\&quot;: \&quot;string\&quot;,           \&quot;Type\&quot;: \&quot;CreditCard\&quot;         }       ],       \&quot;PurchaseDate\&quot;: \&quot;2020-11-01T00:00:00Z\&quot;,       \&quot;SalesOrderKey\&quot;: \&quot;Order123\&quot;,       \&quot;SalesTaxCollected\&quot;: 0.00,       \&quot;Shipments\&quot;: [         {           \&quot;Discounts\&quot;: [             {               \&quot;Amount\&quot;: 0.00,               \&quot;Code\&quot;: \&quot;string\&quot;,               \&quot;Type\&quot;: \&quot;string\&quot;             }           ],           \&quot;FulfillmentAccount\&quot;: \&quot;Account123\&quot;,           \&quot;FulfillmentHouse\&quot;: \&quot;WineShipping\&quot;,           \&quot;FulfillmentExceptionReason\&quot;: \&quot;Test Exception Reason\&quot;,           \&quot;FulfillmentExceptionType\&quot;: \&quot;Test Exception Type\&quot;,           \&quot;GiftNote\&quot;: \&quot;Happy Birthday\&quot;,           \&quot;Handling\&quot;: 0.00,           \&quot;LicenseRelationship\&quot;: \&quot;SupplierToConsumer\&quot;,           \&quot;Packages\&quot;: [             {               \&quot;TrackingNumber\&quot;: \&quot;ABC123456789\&quot;             }           ],           \&quot;ShipDate\&quot;: \&quot;2020-11-01T00:00:00Z\&quot;,           \&quot;ShipmentItems\&quot;: [{             \&quot;BrandKey\&quot;: \&quot;Brand123\&quot;,             \&quot;Discounts\&quot;: [               {                 \&quot;Amount\&quot;: 0.00,                 \&quot;Code\&quot;: \&quot;string\&quot;,                 \&quot;Type\&quot;: \&quot;string\&quot;               }             ],             \&quot;ProductKey\&quot;: \&quot;Product123\&quot;,             \&quot;ProductQuantity\&quot;: 2,             \&quot;ProductUnitPrice\&quot;: 19.99,             \&quot;CITB\&quot;: \&quot;CITB\&quot;           }],           \&quot;ShipmentKey\&quot;: \&quot;1\&quot;,           \&quot;ShipmentStatus\&quot;: \&quot;SentToFulfillment\&quot;,           \&quot;Shipping\&quot;: 0.00,           \&quot;ShippingService\&quot;: \&quot;FEX\&quot;,           \&quot;ShipTo\&quot;: {              \&quot;DateOfBirth\&quot;: \&quot;1970-01-01T00:00:00Z\&quot;,               \&quot;City\&quot;: \&quot;Boulder\&quot;,               \&quot;Company\&quot;: \&quot;Sovos\&quot;,               \&quot;Country\&quot;: \&quot;US\&quot;,               \&quot;County\&quot;: \&quot;Boulder\&quot;,               \&quot;Email\&quot;: \&quot;example@sovos.com\&quot;,               \&quot;Fax\&quot;: \&quot;555-555-5555\&quot;,               \&quot;FirstName\&quot;: \&quot;Test First Name\&quot;,               \&quot;LastName\&quot;: \&quot;Test Last Name\&quot;,               \&quot;Phone\&quot;: \&quot;555-555-5555\&quot;,               \&quot;State\&quot;: \&quot;CO\&quot;,               \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,               \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,               \&quot;Zip1\&quot;: \&quot;80301\&quot;,               \&quot;Zip2\&quot;: \&quot;5728\&quot;            },           \&quot;SpecialInstructions\&quot;: \&quot;Test Instructions\&quot;         }       ],       \&quot;Tags\&quot;: [         {           \&quot;Name\&quot;: \&quot;Test Tag\&quot;         }       ]     },     \&quot;AddressOption\&quot;: {       \&quot;IgnoreStreetLevelErrors\&quot;: false,       \&quot;RejectIfAddressSuggested\&quot;: true     }   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesQuoteSalesOrderInput] :ship_compliant_rest_api_domains_sales_order_entities_quote_sales_order_input The sales order to Quote
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCheckComplianceResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCheckComplianceResponse data, response status code and response headers
    def api_v1_sales_orders_quote_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_quote_post ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/quote'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_sales_order_entities_quote_sales_order_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesCheckComplianceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_quote_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_quote_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the tax due for a sales order without saving results for future use.
    # Sample request:                 POST /api/v1/salesOrders/quote/sales-tax   {     \"ShipToAddress\": {    \"City\":  \"Boulder\",       \"State\": \"CO\",       \"Street1\": \"2465 Central Ave\",       \"Street2\": \"Ste 110\",       \"Zip1\": \"80301\",       \"Zip2\": \"5728\"     },     \"EffectiveDate\": \"2020-11-01T00:00:00Z\",     \"TaxSaleType\": \"onsite\",     \"ShippingAndHandlingCollected\": 0.00,     \"OrderItems\": [       {         \"BrandKey\": \"Brand123\",         \"ProductKey\": \"Product123\",         \"ProductQuantity\": 2,         \"ProductUnitPrice\": 19.99       }     ]   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesQuoteTaxForSalesOrder] :ship_compliant_rest_api_domains_sales_order_entities_quote_tax_for_sales_order The sales order to Quote the tax
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesQuoteTaxSalesOrderResponse]
    def api_v1_sales_orders_quote_sales_tax_post(opts = {})
      data, _status_code, _headers = api_v1_sales_orders_quote_sales_tax_post_with_http_info(opts)
      data
    end

    # Returns the tax due for a sales order without saving results for future use.
    # Sample request:                 POST /api/v1/salesOrders/quote/sales-tax   {     \&quot;ShipToAddress\&quot;: {    \&quot;City\&quot;:  \&quot;Boulder\&quot;,       \&quot;State\&quot;: \&quot;CO\&quot;,       \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,       \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,       \&quot;Zip1\&quot;: \&quot;80301\&quot;,       \&quot;Zip2\&quot;: \&quot;5728\&quot;     },     \&quot;EffectiveDate\&quot;: \&quot;2020-11-01T00:00:00Z\&quot;,     \&quot;TaxSaleType\&quot;: \&quot;onsite\&quot;,     \&quot;ShippingAndHandlingCollected\&quot;: 0.00,     \&quot;OrderItems\&quot;: [       {         \&quot;BrandKey\&quot;: \&quot;Brand123\&quot;,         \&quot;ProductKey\&quot;: \&quot;Product123\&quot;,         \&quot;ProductQuantity\&quot;: 2,         \&quot;ProductUnitPrice\&quot;: 19.99       }     ]   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesQuoteTaxForSalesOrder] :ship_compliant_rest_api_domains_sales_order_entities_quote_tax_for_sales_order The sales order to Quote the tax
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesQuoteTaxSalesOrderResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesQuoteTaxSalesOrderResponse data, response status code and response headers
    def api_v1_sales_orders_quote_sales_tax_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_quote_sales_tax_post ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/quote/sales-tax'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_sales_order_entities_quote_tax_for_sales_order'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesQuoteTaxSalesOrderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_quote_sales_tax_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_quote_sales_tax_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the tax rate for a sales order based on the Address.
    # Sample request:     POST /api/v1/salesOrders/quote/sales-tax-rate   {     \"ShipToAddress\": {    \"City\":  \"Boulder\",       \"State\": \"CO\",       \"Street1\": \"2465 Central Ave\",       \"Street2\": \"Ste 110\",       \"Zip1\": \"80301\",       \"Zip2\": \"5728\"     },     \"EffectiveDate\": \"2020-11-01T00:00:00Z\",     \"TaxSaleType\": \"onsite\",     \"LicenseRelationship\" :\"\"   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesSalesTaxRatesByAddress] :ship_compliant_rest_api_domains_sales_order_entities_sales_tax_rates_by_address 
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesTaxRateSalesOrderByAddressResponse]
    def api_v1_sales_orders_quote_sales_tax_rate_post(opts = {})
      data, _status_code, _headers = api_v1_sales_orders_quote_sales_tax_rate_post_with_http_info(opts)
      data
    end

    # Returns the tax rate for a sales order based on the Address.
    # Sample request:     POST /api/v1/salesOrders/quote/sales-tax-rate   {     \&quot;ShipToAddress\&quot;: {    \&quot;City\&quot;:  \&quot;Boulder\&quot;,       \&quot;State\&quot;: \&quot;CO\&quot;,       \&quot;Street1\&quot;: \&quot;2465 Central Ave\&quot;,       \&quot;Street2\&quot;: \&quot;Ste 110\&quot;,       \&quot;Zip1\&quot;: \&quot;80301\&quot;,       \&quot;Zip2\&quot;: \&quot;5728\&quot;     },     \&quot;EffectiveDate\&quot;: \&quot;2020-11-01T00:00:00Z\&quot;,     \&quot;TaxSaleType\&quot;: \&quot;onsite\&quot;,     \&quot;LicenseRelationship\&quot; :\&quot;\&quot;   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesSalesTaxRatesByAddress] :ship_compliant_rest_api_domains_sales_order_entities_sales_tax_rates_by_address 
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesTaxRateSalesOrderByAddressResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesTaxRateSalesOrderByAddressResponse data, response status code and response headers
    def api_v1_sales_orders_quote_sales_tax_rate_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_quote_sales_tax_rate_post ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/quote/sales-tax-rate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_sales_order_entities_sales_tax_rates_by_address'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesTaxRateSalesOrderByAddressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_quote_sales_tax_rate_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_quote_sales_tax_rate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Voids a sales order
    # Sample request:                    DELETE /api/v1/salesOrders/ORDER123
    # @param sales_order_key [String] The sales order number
    # @param [Hash] opts the optional parameters
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteSalesOrderResponse]
    def api_v1_sales_orders_sales_order_key_delete(sales_order_key, opts = {})
      data, _status_code, _headers = api_v1_sales_orders_sales_order_key_delete_with_http_info(sales_order_key, opts)
      data
    end

    # Voids a sales order
    # Sample request:                    DELETE /api/v1/salesOrders/ORDER123
    # @param sales_order_key [String] The sales order number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteSalesOrderResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteSalesOrderResponse data, response status code and response headers
    def api_v1_sales_orders_sales_order_key_delete_with_http_info(sales_order_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_sales_order_key_delete ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/{salesOrderKey}'.sub('{' + 'salesOrderKey' + '}', CGI.escape(sales_order_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteSalesOrderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_sales_order_key_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_sales_order_key_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the specified sales order
    # Sample request:                    GET /api/v1/salesOrders/ORDER123
    # @param sales_order_key [String] The sales order number
    # @param [Hash] opts the optional parameters
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetSalesOrderSuccessResponse]
    def api_v1_sales_orders_sales_order_key_get(sales_order_key, opts = {})
      data, _status_code, _headers = api_v1_sales_orders_sales_order_key_get_with_http_info(sales_order_key, opts)
      data
    end

    # Retrieves the specified sales order
    # Sample request:                    GET /api/v1/salesOrders/ORDER123
    # @param sales_order_key [String] The sales order number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetSalesOrderSuccessResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetSalesOrderSuccessResponse data, response status code and response headers
    def api_v1_sales_orders_sales_order_key_get_with_http_info(sales_order_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_sales_order_key_get ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/{salesOrderKey}'.sub('{' + 'salesOrderKey' + '}', CGI.escape(sales_order_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetSalesOrderSuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_sales_order_key_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_sales_order_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes all hold locations from a Sales Order
    # Sample request:                 DELETE /api/v1/salesOrders/ORDER123/hold-location
    # @param sales_order_key [String] Mandatory: Sales order identifier.
    # @param [Hash] opts the optional parameters
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteHoldLocationResponse]
    def api_v1_sales_orders_sales_order_key_hold_location_delete(sales_order_key, opts = {})
      data, _status_code, _headers = api_v1_sales_orders_sales_order_key_hold_location_delete_with_http_info(sales_order_key, opts)
      data
    end

    # Deletes all hold locations from a Sales Order
    # Sample request:                 DELETE /api/v1/salesOrders/ORDER123/hold-location
    # @param sales_order_key [String] Mandatory: Sales order identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteHoldLocationResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteHoldLocationResponse data, response status code and response headers
    def api_v1_sales_orders_sales_order_key_hold_location_delete_with_http_info(sales_order_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_sales_order_key_hold_location_delete ...'
      end
      # verify the required parameter 'sales_order_key' is set
      if @api_client.config.client_side_validation && sales_order_key.nil?
        fail ArgumentError, "Missing the required parameter 'sales_order_key' when calling SalesOrdersApi.api_v1_sales_orders_sales_order_key_hold_location_delete"
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/{salesOrderKey}/hold-location'.sub('{' + 'salesOrderKey' + '}', CGI.escape(sales_order_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteHoldLocationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_sales_order_key_hold_location_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_sales_order_key_hold_location_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds a new Hold Location (previously PickUp location) to a shipment in a sales order.
    # Sample request:        POST /api/v1/salesOrders/ORDER123/hold-location      {          \"shipmentKey\": \"Ship1\",          \"address\": {              \"city\": \"Boulder\",              \"company\": \"Sovos\",              \"country\": \"US\",              \"county\": \"Boulder\",              \"email\": \"example@sovos.com\",              \"fax\": \"555-555-5555\",              \"firstName\": \"Example First Name\",              \"lastName\": \"Example Last Name\",              \"phone\": \"555-555-5555\",              \"state\": \"CO\",              \"street1\": \"2465 Central Ave\",              \"street2\": \"Ste 110\",              \"zip1\": \"80301\",              \"zip2\": \"5728\"          }      }
    # @param sales_order_key [String] Mandatory: Sales order identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsHoldLocationEntitiesAddUpdateHoldLocation] :ship_compliant_rest_api_domains_hold_location_entities_add_update_hold_location New hold location details.
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostHoldLocationResponse]
    def api_v1_sales_orders_sales_order_key_hold_location_post(sales_order_key, opts = {})
      data, _status_code, _headers = api_v1_sales_orders_sales_order_key_hold_location_post_with_http_info(sales_order_key, opts)
      data
    end

    # Adds a new Hold Location (previously PickUp location) to a shipment in a sales order.
    # Sample request:        POST /api/v1/salesOrders/ORDER123/hold-location      {          \&quot;shipmentKey\&quot;: \&quot;Ship1\&quot;,          \&quot;address\&quot;: {              \&quot;city\&quot;: \&quot;Boulder\&quot;,              \&quot;company\&quot;: \&quot;Sovos\&quot;,              \&quot;country\&quot;: \&quot;US\&quot;,              \&quot;county\&quot;: \&quot;Boulder\&quot;,              \&quot;email\&quot;: \&quot;example@sovos.com\&quot;,              \&quot;fax\&quot;: \&quot;555-555-5555\&quot;,              \&quot;firstName\&quot;: \&quot;Example First Name\&quot;,              \&quot;lastName\&quot;: \&quot;Example Last Name\&quot;,              \&quot;phone\&quot;: \&quot;555-555-5555\&quot;,              \&quot;state\&quot;: \&quot;CO\&quot;,              \&quot;street1\&quot;: \&quot;2465 Central Ave\&quot;,              \&quot;street2\&quot;: \&quot;Ste 110\&quot;,              \&quot;zip1\&quot;: \&quot;80301\&quot;,              \&quot;zip2\&quot;: \&quot;5728\&quot;          }      }
    # @param sales_order_key [String] Mandatory: Sales order identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsHoldLocationEntitiesAddUpdateHoldLocation] :ship_compliant_rest_api_domains_hold_location_entities_add_update_hold_location New hold location details.
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostHoldLocationResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostHoldLocationResponse data, response status code and response headers
    def api_v1_sales_orders_sales_order_key_hold_location_post_with_http_info(sales_order_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_sales_order_key_hold_location_post ...'
      end
      # verify the required parameter 'sales_order_key' is set
      if @api_client.config.client_side_validation && sales_order_key.nil?
        fail ArgumentError, "Missing the required parameter 'sales_order_key' when calling SalesOrdersApi.api_v1_sales_orders_sales_order_key_hold_location_post"
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/{salesOrderKey}/hold-location'.sub('{' + 'salesOrderKey' + '}', CGI.escape(sales_order_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_hold_location_entities_add_update_hold_location'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostHoldLocationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_sales_order_key_hold_location_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_sales_order_key_hold_location_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes one occurrence of a hold location from a Sales Order by shipment key
    # Sample request:                 DELETE /api/v1/salesOrders/ORDER123/shipment/SHIP1/hold-location
    # @param sales_order_key [String] Mandatory: Sales order identifier.
    # @param shipment_key [String] Mandatory: shipment identifier.
    # @param [Hash] opts the optional parameters
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteHoldLocationResponse]
    def api_v1_sales_orders_sales_order_key_shipment_shipment_key_hold_location_delete(sales_order_key, shipment_key, opts = {})
      data, _status_code, _headers = api_v1_sales_orders_sales_order_key_shipment_shipment_key_hold_location_delete_with_http_info(sales_order_key, shipment_key, opts)
      data
    end

    # Deletes one occurrence of a hold location from a Sales Order by shipment key
    # Sample request:                 DELETE /api/v1/salesOrders/ORDER123/shipment/SHIP1/hold-location
    # @param sales_order_key [String] Mandatory: Sales order identifier.
    # @param shipment_key [String] Mandatory: shipment identifier.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteHoldLocationResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteHoldLocationResponse data, response status code and response headers
    def api_v1_sales_orders_sales_order_key_shipment_shipment_key_hold_location_delete_with_http_info(sales_order_key, shipment_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_sales_order_key_shipment_shipment_key_hold_location_delete ...'
      end
      # verify the required parameter 'sales_order_key' is set
      if @api_client.config.client_side_validation && sales_order_key.nil?
        fail ArgumentError, "Missing the required parameter 'sales_order_key' when calling SalesOrdersApi.api_v1_sales_orders_sales_order_key_shipment_shipment_key_hold_location_delete"
      end
      # verify the required parameter 'shipment_key' is set
      if @api_client.config.client_side_validation && shipment_key.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_key' when calling SalesOrdersApi.api_v1_sales_orders_sales_order_key_shipment_shipment_key_hold_location_delete"
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/{salesOrderKey}/shipment/{shipmentKey}/hold-location'.sub('{' + 'salesOrderKey' + '}', CGI.escape(sales_order_key.to_s)).sub('{' + 'shipmentKey' + '}', CGI.escape(shipment_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteHoldLocationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_sales_order_key_shipment_shipment_key_hold_location_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_sales_order_key_shipment_shipment_key_hold_location_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Voids all Trackings for a specific shipment in a sales order
    # Sample request:                 DELETE /api/v1/salesOrders/Order123/shipment/Ship1/tracking
    # @param sales_order_key [String] The sales order number
    # @param shipment_key [String] The shipment number
    # @param [Hash] opts the optional parameters
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse]
    def api_v1_sales_orders_sales_order_key_shipment_shipment_key_tracking_delete(sales_order_key, shipment_key, opts = {})
      data, _status_code, _headers = api_v1_sales_orders_sales_order_key_shipment_shipment_key_tracking_delete_with_http_info(sales_order_key, shipment_key, opts)
      data
    end

    # Voids all Trackings for a specific shipment in a sales order
    # Sample request:                 DELETE /api/v1/salesOrders/Order123/shipment/Ship1/tracking
    # @param sales_order_key [String] The sales order number
    # @param shipment_key [String] The shipment number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse data, response status code and response headers
    def api_v1_sales_orders_sales_order_key_shipment_shipment_key_tracking_delete_with_http_info(sales_order_key, shipment_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_sales_order_key_shipment_shipment_key_tracking_delete ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/{salesOrderKey}/shipment/{shipmentKey}/tracking'.sub('{' + 'salesOrderKey' + '}', CGI.escape(sales_order_key.to_s)).sub('{' + 'shipmentKey' + '}', CGI.escape(shipment_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_sales_order_key_shipment_shipment_key_tracking_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_sales_order_key_shipment_shipment_key_tracking_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Voids a specific tracking number for a shipment in a sales order.
    # Sample request:                 DELETE /api/v1/salesOrders/Order123/shipment/Ship1/tracking/ABC123456789
    # @param sales_order_key [String] The sales order number
    # @param shipment_key [String] The shipment number
    # @param tracking_number [String] The tracking number
    # @param [Hash] opts the optional parameters
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse]
    def api_v1_sales_orders_sales_order_key_shipment_shipment_key_tracking_tracking_number_delete(sales_order_key, shipment_key, tracking_number, opts = {})
      data, _status_code, _headers = api_v1_sales_orders_sales_order_key_shipment_shipment_key_tracking_tracking_number_delete_with_http_info(sales_order_key, shipment_key, tracking_number, opts)
      data
    end

    # Voids a specific tracking number for a shipment in a sales order.
    # Sample request:                 DELETE /api/v1/salesOrders/Order123/shipment/Ship1/tracking/ABC123456789
    # @param sales_order_key [String] The sales order number
    # @param shipment_key [String] The shipment number
    # @param tracking_number [String] The tracking number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse data, response status code and response headers
    def api_v1_sales_orders_sales_order_key_shipment_shipment_key_tracking_tracking_number_delete_with_http_info(sales_order_key, shipment_key, tracking_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_sales_order_key_shipment_shipment_key_tracking_tracking_number_delete ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/{salesOrderKey}/shipment/{shipmentKey}/tracking/{trackingNumber}'.sub('{' + 'salesOrderKey' + '}', CGI.escape(sales_order_key.to_s)).sub('{' + 'shipmentKey' + '}', CGI.escape(shipment_key.to_s)).sub('{' + 'trackingNumber' + '}', CGI.escape(tracking_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_sales_order_key_shipment_shipment_key_tracking_tracking_number_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_sales_order_key_shipment_shipment_key_tracking_tracking_number_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Voids all Trackings for a sales order
    # Sample request:                 DELETE /api/v1/salesOrders/Order123/tracking
    # @param sales_order_key [String] The sales order number
    # @param [Hash] opts the optional parameters
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse]
    def api_v1_sales_orders_sales_order_key_tracking_delete(sales_order_key, opts = {})
      data, _status_code, _headers = api_v1_sales_orders_sales_order_key_tracking_delete_with_http_info(sales_order_key, opts)
      data
    end

    # Voids all Trackings for a sales order
    # Sample request:                 DELETE /api/v1/salesOrders/Order123/tracking
    # @param sales_order_key [String] The sales order number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse data, response status code and response headers
    def api_v1_sales_orders_sales_order_key_tracking_delete_with_http_info(sales_order_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_sales_order_key_tracking_delete ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/{salesOrderKey}/tracking'.sub('{' + 'salesOrderKey' + '}', CGI.escape(sales_order_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_sales_order_key_tracking_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_sales_order_key_tracking_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all tracking numbers by salesOrderKey or tracking numbers for a specified (optional) shipment key.
    # Sample request:                 GET /api/v1/salesOrders/Order123/tracking                If a specific shipment tracking is required.                    GET /api/v1/salesOrders/Order123/tracking?shipmentKey=Ship1
    # @param sales_order_key [String] The sales order number
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :shipment_key The Shipment key
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetTrackingByKeyResponse]
    def api_v1_sales_orders_sales_order_key_tracking_get(sales_order_key, opts = {})
      data, _status_code, _headers = api_v1_sales_orders_sales_order_key_tracking_get_with_http_info(sales_order_key, opts)
      data
    end

    # Retrieves all tracking numbers by salesOrderKey or tracking numbers for a specified (optional) shipment key.
    # Sample request:                 GET /api/v1/salesOrders/Order123/tracking                If a specific shipment tracking is required.                    GET /api/v1/salesOrders/Order123/tracking?shipmentKey&#x3D;Ship1
    # @param sales_order_key [String] The sales order number
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :shipment_key The Shipment key
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetTrackingByKeyResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetTrackingByKeyResponse data, response status code and response headers
    def api_v1_sales_orders_sales_order_key_tracking_get_with_http_info(sales_order_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_sales_order_key_tracking_get ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/{salesOrderKey}/tracking'.sub('{' + 'salesOrderKey' + '}', CGI.escape(sales_order_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'shipmentKey'] = @api_client.build_collection_param(opts[:'shipment_key'], :multi) if !opts[:'shipment_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesGetTrackingByKeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_sales_order_key_tracking_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_sales_order_key_tracking_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds a new Tracking
    # Sample request:                 POST /api/v1/salesOrders/Order123/tracking   {       \"ShipmentKey\": \"Ship1\",       \"TrackingNumbers\": [        \"ABC123456789\"       ]   }
    # @param sales_order_key [String] The sales order number
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsTrackingEntitiesTrackingInput] :ship_compliant_rest_api_domains_tracking_entities_tracking_input The new Trackings
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostTrackingResponse]
    def api_v1_sales_orders_sales_order_key_tracking_post(sales_order_key, opts = {})
      data, _status_code, _headers = api_v1_sales_orders_sales_order_key_tracking_post_with_http_info(sales_order_key, opts)
      data
    end

    # Adds a new Tracking
    # Sample request:                 POST /api/v1/salesOrders/Order123/tracking   {       \&quot;ShipmentKey\&quot;: \&quot;Ship1\&quot;,       \&quot;TrackingNumbers\&quot;: [        \&quot;ABC123456789\&quot;       ]   }
    # @param sales_order_key [String] The sales order number
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsTrackingEntitiesTrackingInput] :ship_compliant_rest_api_domains_tracking_entities_tracking_input The new Trackings
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostTrackingResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostTrackingResponse data, response status code and response headers
    def api_v1_sales_orders_sales_order_key_tracking_post_with_http_info(sales_order_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_sales_order_key_tracking_post ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/{salesOrderKey}/tracking'.sub('{' + 'salesOrderKey' + '}', CGI.escape(sales_order_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_tracking_entities_tracking_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesPostTrackingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_sales_order_key_tracking_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_sales_order_key_tracking_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Voids a specific tracking number for all shipments in a sales order
    # Sample request:                 DELETE /api/v1/salesOrders/Order123/tracking/ABC123456789
    # @param sales_order_key [String] The sales order number
    # @param tracking_number [String] The tracking number
    # @param [Hash] opts the optional parameters
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse]
    def api_v1_sales_orders_sales_order_key_tracking_tracking_number_delete(sales_order_key, tracking_number, opts = {})
      data, _status_code, _headers = api_v1_sales_orders_sales_order_key_tracking_tracking_number_delete_with_http_info(sales_order_key, tracking_number, opts)
      data
    end

    # Voids a specific tracking number for all shipments in a sales order
    # Sample request:                 DELETE /api/v1/salesOrders/Order123/tracking/ABC123456789
    # @param sales_order_key [String] The sales order number
    # @param tracking_number [String] The tracking number
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse data, response status code and response headers
    def api_v1_sales_orders_sales_order_key_tracking_tracking_number_delete_with_http_info(sales_order_key, tracking_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_sales_order_key_tracking_tracking_number_delete ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/{salesOrderKey}/tracking/{trackingNumber}'.sub('{' + 'salesOrderKey' + '}', CGI.escape(sales_order_key.to_s)).sub('{' + 'trackingNumber' + '}', CGI.escape(tracking_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteTrackingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_sales_order_key_tracking_tracking_number_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_sales_order_key_tracking_tracking_number_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates shipment status
    # Sample request:                    PUT /api/v1/salesOrders/shipments/status      {       \"salesOrderKey\": \"109807833\",          \"shipmentKey\": \"2012351B\",          \"shipmentStatus\": \"Delivered\"   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesUpdateShipmentStatusInput] :ship_compliant_rest_api_domains_sales_order_entities_update_shipment_status_input Request body containing SalesOrderKey, ShipmentKey and new ShipmentStatus
    # @return [ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteSalesOrderResponse]
    def api_v1_sales_orders_shipments_status_put(opts = {})
      data, _status_code, _headers = api_v1_sales_orders_shipments_status_put_with_http_info(opts)
      data
    end

    # Updates shipment status
    # Sample request:                    PUT /api/v1/salesOrders/shipments/status      {       \&quot;salesOrderKey\&quot;: \&quot;109807833\&quot;,          \&quot;shipmentKey\&quot;: \&quot;2012351B\&quot;,          \&quot;shipmentStatus\&quot;: \&quot;Delivered\&quot;   }
    # @param [Hash] opts the optional parameters
    # @option opts [ShipCompliantRestAPIDomainsSalesOrderEntitiesUpdateShipmentStatusInput] :ship_compliant_rest_api_domains_sales_order_entities_update_shipment_status_input Request body containing SalesOrderKey, ShipmentKey and new ShipmentStatus
    # @return [Array<(ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteSalesOrderResponse, Integer, Hash)>] ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteSalesOrderResponse data, response status code and response headers
    def api_v1_sales_orders_shipments_status_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalesOrdersApi.api_v1_sales_orders_shipments_status_put ...'
      end
      # resource path
      local_var_path = '/api/v1/salesOrders/shipments/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'ship_compliant_rest_api_domains_sales_order_entities_update_shipment_status_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShipCompliantRestAPIMiddlewaresSwaggerResponseTypesDeleteSalesOrderResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SalesOrdersApi.api_v1_sales_orders_shipments_status_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalesOrdersApi#api_v1_sales_orders_shipments_status_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
