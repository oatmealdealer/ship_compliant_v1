=begin
#ShipCompliant Connect

#ShipCompliant REST API supporting eCommerce and Point of Sale workflows. <br /> * required fields.

The version of the OpenAPI document: v1
Contact: shipcompliantsupport@sovos.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ShipCompliantRestAPIDomainsSalesOrderEntitiesShipmentOutput
    attr_accessor :discounts

    attr_accessor :fulfillment_account

    attr_accessor :fulfillment_house

    attr_accessor :fulfillment_exception_reason

    attr_accessor :fulfillment_exception_type

    attr_accessor :gift_note

    attr_accessor :handling

    attr_accessor :license_relationship

    attr_accessor :packages

    attr_accessor :ship_date

    attr_accessor :shipment_items

    attr_accessor :shipment_key

    attr_accessor :shipment_status

    attr_accessor :shipping

    attr_accessor :shipping_service

    attr_accessor :ship_to

    attr_accessor :special_instructions

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'discounts' => :'discounts',
        :'fulfillment_account' => :'fulfillmentAccount',
        :'fulfillment_house' => :'fulfillmentHouse',
        :'fulfillment_exception_reason' => :'fulfillmentExceptionReason',
        :'fulfillment_exception_type' => :'fulfillmentExceptionType',
        :'gift_note' => :'giftNote',
        :'handling' => :'handling',
        :'license_relationship' => :'licenseRelationship',
        :'packages' => :'packages',
        :'ship_date' => :'shipDate',
        :'shipment_items' => :'shipmentItems',
        :'shipment_key' => :'shipmentKey',
        :'shipment_status' => :'shipmentStatus',
        :'shipping' => :'shipping',
        :'shipping_service' => :'shippingService',
        :'ship_to' => :'shipTo',
        :'special_instructions' => :'specialInstructions'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'discounts' => :'Array<ShipCompliantRestAPIDomainsSalesOrderEntitiesShipmentDiscount>',
        :'fulfillment_account' => :'String',
        :'fulfillment_house' => :'String',
        :'fulfillment_exception_reason' => :'String',
        :'fulfillment_exception_type' => :'String',
        :'gift_note' => :'String',
        :'handling' => :'Float',
        :'license_relationship' => :'String',
        :'packages' => :'Array<ShipCompliantRestAPIDomainsSalesOrderEntitiesPackageOutput>',
        :'ship_date' => :'Time',
        :'shipment_items' => :'Array<ShipCompliantRestAPIDomainsSalesOrderEntitiesShipmentItem>',
        :'shipment_key' => :'String',
        :'shipment_status' => :'String',
        :'shipping' => :'Float',
        :'shipping_service' => :'String',
        :'ship_to' => :'ShipCompliantRestAPIDomainsSalesOrderEntitiesAddress',
        :'special_instructions' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'discounts',
        :'fulfillment_account',
        :'fulfillment_house',
        :'fulfillment_exception_reason',
        :'gift_note',
        :'handling',
        :'packages',
        :'shipment_items',
        :'shipment_key',
        :'shipping',
        :'shipping_service',
        :'special_instructions'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ShipCompliantRestAPIDomainsSalesOrderEntitiesShipmentOutput` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ShipCompliantRestAPIDomainsSalesOrderEntitiesShipmentOutput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'discounts')
        if (value = attributes[:'discounts']).is_a?(Array)
          self.discounts = value
        end
      end

      if attributes.key?(:'fulfillment_account')
        self.fulfillment_account = attributes[:'fulfillment_account']
      end

      if attributes.key?(:'fulfillment_house')
        self.fulfillment_house = attributes[:'fulfillment_house']
      end

      if attributes.key?(:'fulfillment_exception_reason')
        self.fulfillment_exception_reason = attributes[:'fulfillment_exception_reason']
      end

      if attributes.key?(:'fulfillment_exception_type')
        self.fulfillment_exception_type = attributes[:'fulfillment_exception_type']
      end

      if attributes.key?(:'gift_note')
        self.gift_note = attributes[:'gift_note']
      end

      if attributes.key?(:'handling')
        self.handling = attributes[:'handling']
      end

      if attributes.key?(:'license_relationship')
        self.license_relationship = attributes[:'license_relationship']
      end

      if attributes.key?(:'packages')
        if (value = attributes[:'packages']).is_a?(Array)
          self.packages = value
        end
      end

      if attributes.key?(:'ship_date')
        self.ship_date = attributes[:'ship_date']
      end

      if attributes.key?(:'shipment_items')
        if (value = attributes[:'shipment_items']).is_a?(Array)
          self.shipment_items = value
        end
      end

      if attributes.key?(:'shipment_key')
        self.shipment_key = attributes[:'shipment_key']
      end

      if attributes.key?(:'shipment_status')
        self.shipment_status = attributes[:'shipment_status']
      end

      if attributes.key?(:'shipping')
        self.shipping = attributes[:'shipping']
      end

      if attributes.key?(:'shipping_service')
        self.shipping_service = attributes[:'shipping_service']
      end

      if attributes.key?(:'ship_to')
        self.ship_to = attributes[:'ship_to']
      end

      if attributes.key?(:'special_instructions')
        self.special_instructions = attributes[:'special_instructions']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      fulfillment_exception_type_validator = EnumAttributeValidator.new('String', ["Null", "None", "Inventory", "NonCompliant", "Other", "Updated", "Setup", "Temperature", "Voided"])
      return false unless fulfillment_exception_type_validator.valid?(@fulfillment_exception_type)
      license_relationship_validator = EnumAttributeValidator.new('String', ["Default", "Pickup", "RetailerToConsumer", "RetailerToThreeTier", "SupplierToConsumer", "SupplierToThreeTier"])
      return false unless license_relationship_validator.valid?(@license_relationship)
      shipment_status_validator = EnumAttributeValidator.new('String', ["Delivered", "InProcess", "Shipped", "Voided", "SentToFulfillment", "PaymentAccepted"])
      return false unless shipment_status_validator.valid?(@shipment_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fulfillment_exception_type Object to be assigned
    def fulfillment_exception_type=(fulfillment_exception_type)
      validator = EnumAttributeValidator.new('String', ["Null", "None", "Inventory", "NonCompliant", "Other", "Updated", "Setup", "Temperature", "Voided"])
      unless validator.valid?(fulfillment_exception_type)
        fail ArgumentError, "invalid value for \"fulfillment_exception_type\", must be one of #{validator.allowable_values}."
      end
      @fulfillment_exception_type = fulfillment_exception_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] license_relationship Object to be assigned
    def license_relationship=(license_relationship)
      validator = EnumAttributeValidator.new('String', ["Default", "Pickup", "RetailerToConsumer", "RetailerToThreeTier", "SupplierToConsumer", "SupplierToThreeTier"])
      unless validator.valid?(license_relationship)
        fail ArgumentError, "invalid value for \"license_relationship\", must be one of #{validator.allowable_values}."
      end
      @license_relationship = license_relationship
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shipment_status Object to be assigned
    def shipment_status=(shipment_status)
      validator = EnumAttributeValidator.new('String', ["Delivered", "InProcess", "Shipped", "Voided", "SentToFulfillment", "PaymentAccepted"])
      unless validator.valid?(shipment_status)
        fail ArgumentError, "invalid value for \"shipment_status\", must be one of #{validator.allowable_values}."
      end
      @shipment_status = shipment_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          discounts == o.discounts &&
          fulfillment_account == o.fulfillment_account &&
          fulfillment_house == o.fulfillment_house &&
          fulfillment_exception_reason == o.fulfillment_exception_reason &&
          fulfillment_exception_type == o.fulfillment_exception_type &&
          gift_note == o.gift_note &&
          handling == o.handling &&
          license_relationship == o.license_relationship &&
          packages == o.packages &&
          ship_date == o.ship_date &&
          shipment_items == o.shipment_items &&
          shipment_key == o.shipment_key &&
          shipment_status == o.shipment_status &&
          shipping == o.shipping &&
          shipping_service == o.shipping_service &&
          ship_to == o.ship_to &&
          special_instructions == o.special_instructions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [discounts, fulfillment_account, fulfillment_house, fulfillment_exception_reason, fulfillment_exception_type, gift_note, handling, license_relationship, packages, ship_date, shipment_items, shipment_key, shipment_status, shipping, shipping_service, ship_to, special_instructions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
