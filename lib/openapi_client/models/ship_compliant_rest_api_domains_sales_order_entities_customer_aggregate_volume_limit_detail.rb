=begin
#ShipCompliant Connect

#ShipCompliant REST API supporting eCommerce and Point of Sale workflows. <br /> * required fields.

The version of the OpenAPI document: v1
Contact: shipcompliantsupport@sovos.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ShipCompliantRestAPIDomainsSalesOrderEntitiesCustomerAggregateVolumeLimitDetail
    attr_accessor :customer_type

    attr_accessor :time_frame_count

    attr_accessor :time_frame_type

    attr_accessor :time_frame_unit

    attr_accessor :unit_of_measure

    attr_accessor :volume_count

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'customer_type' => :'customerType',
        :'time_frame_count' => :'timeFrameCount',
        :'time_frame_type' => :'timeFrameType',
        :'time_frame_unit' => :'timeFrameUnit',
        :'unit_of_measure' => :'unitOfMeasure',
        :'volume_count' => :'volumeCount'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'customer_type' => :'String',
        :'time_frame_count' => :'Integer',
        :'time_frame_type' => :'String',
        :'time_frame_unit' => :'String',
        :'unit_of_measure' => :'String',
        :'volume_count' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ShipCompliantRestAPIDomainsSalesOrderEntitiesCustomerAggregateVolumeLimitDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ShipCompliantRestAPIDomainsSalesOrderEntitiesCustomerAggregateVolumeLimitDetail`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'customer_type')
        self.customer_type = attributes[:'customer_type']
      end

      if attributes.key?(:'time_frame_count')
        self.time_frame_count = attributes[:'time_frame_count']
      end

      if attributes.key?(:'time_frame_type')
        self.time_frame_type = attributes[:'time_frame_type']
      end

      if attributes.key?(:'time_frame_unit')
        self.time_frame_unit = attributes[:'time_frame_unit']
      end

      if attributes.key?(:'unit_of_measure')
        self.unit_of_measure = attributes[:'unit_of_measure']
      end

      if attributes.key?(:'volume_count')
        self.volume_count = attributes[:'volume_count']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      customer_type_validator = EnumAttributeValidator.new('String', ["Null", "Household", "Individual"])
      return false unless customer_type_validator.valid?(@customer_type)
      time_frame_type_validator = EnumAttributeValidator.new('String', ["Calendar", "Rolling"])
      return false unless time_frame_type_validator.valid?(@time_frame_type)
      time_frame_unit_validator = EnumAttributeValidator.new('String', ["Null", "Minutes", "Hours", "Days", "Weeks", "Months", "Years"])
      return false unless time_frame_unit_validator.valid?(@time_frame_unit)
      unit_of_measure_validator = EnumAttributeValidator.new('String', ["Null", "Bottle", "Case", "Gallon", "Liter", "Milliliter", "Ounce", "Quart", "Barrel"])
      return false unless unit_of_measure_validator.valid?(@unit_of_measure)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] customer_type Object to be assigned
    def customer_type=(customer_type)
      validator = EnumAttributeValidator.new('String', ["Null", "Household", "Individual"])
      unless validator.valid?(customer_type)
        fail ArgumentError, "invalid value for \"customer_type\", must be one of #{validator.allowable_values}."
      end
      @customer_type = customer_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] time_frame_type Object to be assigned
    def time_frame_type=(time_frame_type)
      validator = EnumAttributeValidator.new('String', ["Calendar", "Rolling"])
      unless validator.valid?(time_frame_type)
        fail ArgumentError, "invalid value for \"time_frame_type\", must be one of #{validator.allowable_values}."
      end
      @time_frame_type = time_frame_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] time_frame_unit Object to be assigned
    def time_frame_unit=(time_frame_unit)
      validator = EnumAttributeValidator.new('String', ["Null", "Minutes", "Hours", "Days", "Weeks", "Months", "Years"])
      unless validator.valid?(time_frame_unit)
        fail ArgumentError, "invalid value for \"time_frame_unit\", must be one of #{validator.allowable_values}."
      end
      @time_frame_unit = time_frame_unit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit_of_measure Object to be assigned
    def unit_of_measure=(unit_of_measure)
      validator = EnumAttributeValidator.new('String', ["Null", "Bottle", "Case", "Gallon", "Liter", "Milliliter", "Ounce", "Quart", "Barrel"])
      unless validator.valid?(unit_of_measure)
        fail ArgumentError, "invalid value for \"unit_of_measure\", must be one of #{validator.allowable_values}."
      end
      @unit_of_measure = unit_of_measure
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          customer_type == o.customer_type &&
          time_frame_count == o.time_frame_count &&
          time_frame_type == o.time_frame_type &&
          time_frame_unit == o.time_frame_unit &&
          unit_of_measure == o.unit_of_measure &&
          volume_count == o.volume_count
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [customer_type, time_frame_count, time_frame_type, time_frame_unit, unit_of_measure, volume_count].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
