=begin
#ShipCompliant Connect

#ShipCompliant REST API supporting eCommerce and Point of Sale workflows. <br /> * required fields.

The version of the OpenAPI document: v1
Contact: shipcompliantsupport@sovos.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenapiClient
  # Contains the fields who can be include in the request to add a new combo.
  class ShipCompliantRestAPIDomainsProductEntitiesComboInput
    # Brand Key field.
    attr_accessor :brand_key

    # ProductComboKey field.
    attr_accessor :product_combo_key

    # Description field.
    attr_accessor :description

    # Number of items per combo.
    attr_accessor :items_per_case

    # Wholesale Case Price field.
    attr_accessor :wholesale_case_price

    # Total Weight field.
    attr_accessor :total_weight

    # NABCA field.
    attr_accessor :nabca

    # SCC field.
    attr_accessor :scc

    # UNIMERC field.
    attr_accessor :unimerc

    # UPC field.
    attr_accessor :upc

    # GTIN field.
    attr_accessor :gtin

    # Combo Components.ShipCompliantRestAPI.Domains.Product.Entities.ComboComponent
    attr_accessor :components

    # Distribution Type Direct or Wholesale
    attr_accessor :distribution_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'brand_key' => :'brandKey',
        :'product_combo_key' => :'productComboKey',
        :'description' => :'description',
        :'items_per_case' => :'itemsPerCase',
        :'wholesale_case_price' => :'wholesaleCasePrice',
        :'total_weight' => :'totalWeight',
        :'nabca' => :'nabca',
        :'scc' => :'scc',
        :'unimerc' => :'unimerc',
        :'upc' => :'upc',
        :'gtin' => :'gtin',
        :'components' => :'components',
        :'distribution_type' => :'distributionType'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'brand_key' => :'String',
        :'product_combo_key' => :'String',
        :'description' => :'String',
        :'items_per_case' => :'Integer',
        :'wholesale_case_price' => :'Float',
        :'total_weight' => :'Float',
        :'nabca' => :'String',
        :'scc' => :'String',
        :'unimerc' => :'String',
        :'upc' => :'String',
        :'gtin' => :'String',
        :'components' => :'Array<ShipCompliantRestAPIDomainsProductEntitiesComboComponent>',
        :'distribution_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'nabca',
        :'scc',
        :'unimerc',
        :'upc',
        :'gtin',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ShipCompliantRestAPIDomainsProductEntitiesComboInput` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ShipCompliantRestAPIDomainsProductEntitiesComboInput`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'brand_key')
        self.brand_key = attributes[:'brand_key']
      else
        self.brand_key = nil
      end

      if attributes.key?(:'product_combo_key')
        self.product_combo_key = attributes[:'product_combo_key']
      else
        self.product_combo_key = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      else
        self.description = nil
      end

      if attributes.key?(:'items_per_case')
        self.items_per_case = attributes[:'items_per_case']
      end

      if attributes.key?(:'wholesale_case_price')
        self.wholesale_case_price = attributes[:'wholesale_case_price']
      end

      if attributes.key?(:'total_weight')
        self.total_weight = attributes[:'total_weight']
      end

      if attributes.key?(:'nabca')
        self.nabca = attributes[:'nabca']
      end

      if attributes.key?(:'scc')
        self.scc = attributes[:'scc']
      end

      if attributes.key?(:'unimerc')
        self.unimerc = attributes[:'unimerc']
      end

      if attributes.key?(:'upc')
        self.upc = attributes[:'upc']
      end

      if attributes.key?(:'gtin')
        self.gtin = attributes[:'gtin']
      end

      if attributes.key?(:'components')
        if (value = attributes[:'components']).is_a?(Array)
          self.components = value
        end
      else
        self.components = nil
      end

      if attributes.key?(:'distribution_type')
        self.distribution_type = attributes[:'distribution_type']
      else
        self.distribution_type = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @brand_key.nil?
        invalid_properties.push('invalid value for "brand_key", brand_key cannot be nil.')
      end

      if @product_combo_key.nil?
        invalid_properties.push('invalid value for "product_combo_key", product_combo_key cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @components.nil?
        invalid_properties.push('invalid value for "components", components cannot be nil.')
      end

      if @distribution_type.nil?
        invalid_properties.push('invalid value for "distribution_type", distribution_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @brand_key.nil?
      return false if @product_combo_key.nil?
      return false if @description.nil?
      return false if @components.nil?
      return false if @distribution_type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          brand_key == o.brand_key &&
          product_combo_key == o.product_combo_key &&
          description == o.description &&
          items_per_case == o.items_per_case &&
          wholesale_case_price == o.wholesale_case_price &&
          total_weight == o.total_weight &&
          nabca == o.nabca &&
          scc == o.scc &&
          unimerc == o.unimerc &&
          upc == o.upc &&
          gtin == o.gtin &&
          components == o.components &&
          distribution_type == o.distribution_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [brand_key, product_combo_key, description, items_per_case, wholesale_case_price, total_weight, nabca, scc, unimerc, upc, gtin, components, distribution_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
