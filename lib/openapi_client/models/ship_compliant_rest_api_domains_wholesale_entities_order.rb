=begin
#ShipCompliant Connect

#ShipCompliant REST API supporting eCommerce and Point of Sale workflows. <br /> * required fields.

The version of the OpenAPI document: v1
Contact: shipcompliantsupport@sovos.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ShipCompliantRestAPIDomainsWholesaleEntitiesOrder
    attr_accessor :billing_customer_key

    attr_accessor :external_sales_order_key

    attr_accessor :order_number

    attr_accessor :order_reserved

    attr_accessor :reference_number

    attr_accessor :refunded_order_reference

    attr_accessor :shipments

    attr_accessor :tags

    attr_accessor :transaction_date

    attr_accessor :tax_collected

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'billing_customer_key' => :'billingCustomerKey',
        :'external_sales_order_key' => :'externalSalesOrderKey',
        :'order_number' => :'orderNumber',
        :'order_reserved' => :'orderReserved',
        :'reference_number' => :'referenceNumber',
        :'refunded_order_reference' => :'refundedOrderReference',
        :'shipments' => :'shipments',
        :'tags' => :'tags',
        :'transaction_date' => :'transactionDate',
        :'tax_collected' => :'taxCollected'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'billing_customer_key' => :'String',
        :'external_sales_order_key' => :'String',
        :'order_number' => :'String',
        :'order_reserved' => :'String',
        :'reference_number' => :'String',
        :'refunded_order_reference' => :'String',
        :'shipments' => :'Array<ShipCompliantRestAPIDomainsWholesaleEntitiesShipment>',
        :'tags' => :'Array<ShipCompliantRestAPIDomainsWholesaleEntitiesTag>',
        :'transaction_date' => :'Time',
        :'tax_collected' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'billing_customer_key',
        :'external_sales_order_key',
        :'order_reserved',
        :'reference_number',
        :'refunded_order_reference',
        :'tags',
        :'tax_collected'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ShipCompliantRestAPIDomainsWholesaleEntitiesOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ShipCompliantRestAPIDomainsWholesaleEntitiesOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'billing_customer_key')
        self.billing_customer_key = attributes[:'billing_customer_key']
      end

      if attributes.key?(:'external_sales_order_key')
        self.external_sales_order_key = attributes[:'external_sales_order_key']
      end

      if attributes.key?(:'order_number')
        self.order_number = attributes[:'order_number']
      else
        self.order_number = nil
      end

      if attributes.key?(:'order_reserved')
        self.order_reserved = attributes[:'order_reserved']
      end

      if attributes.key?(:'reference_number')
        self.reference_number = attributes[:'reference_number']
      end

      if attributes.key?(:'refunded_order_reference')
        self.refunded_order_reference = attributes[:'refunded_order_reference']
      end

      if attributes.key?(:'shipments')
        if (value = attributes[:'shipments']).is_a?(Array)
          self.shipments = value
        end
      else
        self.shipments = nil
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      else
        self.transaction_date = nil
      end

      if attributes.key?(:'tax_collected')
        self.tax_collected = attributes[:'tax_collected']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @order_number.nil?
        invalid_properties.push('invalid value for "order_number", order_number cannot be nil.')
      end

      if @shipments.nil?
        invalid_properties.push('invalid value for "shipments", shipments cannot be nil.')
      end

      if @transaction_date.nil?
        invalid_properties.push('invalid value for "transaction_date", transaction_date cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @order_number.nil?
      return false if @shipments.nil?
      return false if @transaction_date.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          billing_customer_key == o.billing_customer_key &&
          external_sales_order_key == o.external_sales_order_key &&
          order_number == o.order_number &&
          order_reserved == o.order_reserved &&
          reference_number == o.reference_number &&
          refunded_order_reference == o.refunded_order_reference &&
          shipments == o.shipments &&
          tags == o.tags &&
          transaction_date == o.transaction_date &&
          tax_collected == o.tax_collected
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [billing_customer_key, external_sales_order_key, order_number, order_reserved, reference_number, refunded_order_reference, shipments, tags, transaction_date, tax_collected].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
